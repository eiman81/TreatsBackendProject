============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
metadata: {'Python': '3.9.2', 'Platform': 'Linux-4.19.0-0.bpo.19-amd64-x86_64-with-glibc2.31', 'Packages': {'pytest': '6.2.2', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'jest': '0.3.0', 'hypothesis': '6.1.1', 'timeout': '1.4.2', 'snapshottest': '0.6.0', 'metadata': '2.0.1'}}
rootdir: /import/kamen/3/cs1531/project-automarking/tempstore
plugins: jest-0.3.0, hypothesis-6.1.1, timeout-1.4.2, snapshottest-0.6.0, metadata-2.0.1
collecting ... collected 366 items

httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything ERROR [  0%]
httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat ERROR [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile FAILED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel ERROR [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm ERROR [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll FAILED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testEmailReusable FAILED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testHandleReusable FAILED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidUser FAILED   [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner FAILED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner FAILED [  3%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidToken FAILED  [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange FAILED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner FAILED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken FAILED [  5%]
httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions FAILED    [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser FAILED      [  6%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword FAILED [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout FAILED     [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] FAILED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] FAILED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] FAILED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] FAILED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] FAILED [  9%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail FAILED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName FAILED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration FAILED [  9%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] ERROR [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] ERROR [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] ERROR [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ERROR [ 11%]
httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect FAILED [ 11%]
httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere FAILED [ 12%]
httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember ERROR [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember ERROR [ 12%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId FAILED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken ERROR  [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId FAILED [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidToken ERROR   [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember ERROR [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid FAILED [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid ERROR      [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId FAILED [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken ERROR  [ 19%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId FAILED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken ERROR     [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid FAILED [ 23%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven ERROR [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner ERROR [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId FAILED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken ERROR [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] FAILED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] FAILED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] FAILED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] FAILED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] FAILED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] FAILED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] FAILED [ 30%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] FAILED [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel ERROR [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken FAILED [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels FAILED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken FAILED [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation FAILED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple FAILED   [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers FAILED         [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid FAILED   [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate FAILED    [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken FAILED             [ 33%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful ERROR         [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful ERROR   [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId FAILED             [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken ERROR             [ 34%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully ERROR  [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember ERROR       [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId FAILED               [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken ERROR               [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms PASSED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm ERROR                 [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms FAILED          [ 36%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm ERROR            [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken FAILED           [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent ERROR  [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent ERROR   [ 37%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected ERROR  [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember ERROR [ 39%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid FAILED [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven ERROR [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval ERROR       [ 39%]
httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages ERROR    [ 40%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm ERROR    [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm ERROR [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId ERROR               [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken ERROR              [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit ERROR [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken ERROR      [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique ERROR  [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3 ERROR [ 43%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testInvalidMessageId FAILED  [ 45%]
httpTests/messageTests/test_message_pin.py::testCannotPinTwice ERROR     [ 45%]
httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin ERROR [ 45%]
httpTests/messageTests/test_message_pin.py::testDmMemberCantPin ERROR    [ 45%]
httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm ERROR [ 46%]
httpTests/messageTests/test_message_pin.py::testNonmemberCantPin ERROR   [ 46%]
httpTests/messageTests/test_message_pin.py::testInvalidToken ERROR       [ 46%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel ERROR [ 46%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage ERROR [ 47%]
httpTests/messageTests/test_message_react.py::testInvalidMessageId FAILED [ 47%]
httpTests/messageTests/test_message_react.py::testInvalidReactId ERROR   [ 47%]
httpTests/messageTests/test_message_react.py::testCantReactTwice ERROR   [ 48%]
httpTests/messageTests/test_message_react.py::testNonmemberCannotReact ERROR [ 48%]
httpTests/messageTests/test_message_react.py::testInvalidToken ERROR     [ 48%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage ERROR [ 48%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testInvalidToken ERROR    [ 50%]
httpTests/messageTests/test_message_send.py::testValidMessage ERROR      [ 50%]
httpTests/messageTests/test_message_send.py::testNonmemberPost ERROR     [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidChannel FAILED   [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] ERROR  [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidToken ERROR      [ 51%]
httpTests/messageTests/test_message_senddm.py::testValidMessage ERROR    [ 51%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost ERROR   [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm FAILED      [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] ERROR [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken ERROR    [ 53%]
httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage ERROR [ 53%]
httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately ERROR [ 53%]
httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[] ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidChannel ERROR [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidToken ERROR [ 55%]
httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testNonmemberCannotSendlater ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testCannotTimeTravelAkaSendMessageInPast ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[] ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidDm ERROR  [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidToken ERROR [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel ERROR [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm ERROR [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True] ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False] ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testInvalidOgMessageId ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testInvalidMessageLength ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId ERROR [ 61%]
httpTests/messageTests/test_message_share.py::testShareToInvalidDmId ERROR [ 61%]
httpTests/messageTests/test_message_share.py::testInvalidToken ERROR     [ 61%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testInvalidMessageId FAILED [ 62%]
httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin ERROR [ 64%]
httpTests/messageTests/test_message_unpin.py::testInvalidToken ERROR     [ 64%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel ERROR [ 64%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidMessageId FAILED [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidReactId ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact ERROR [ 66%]
httpTests/messageTests/test_message_unreact.py::testInvalidToken ERROR   [ 66%]
httpTests/otherTests/test_clear.py::testClearWorks FAILED                [ 66%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification ERROR [ 66%]
httpTests/otherTests/test_notifications_get.py::testTagNotInChannel ERROR [ 67%]
httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification ERROR [ 67%]
httpTests/otherTests/test_notifications_get.py::testTagSelf ERROR        [ 67%]
httpTests/otherTests/test_notifications_get.py::testMultipleTags ERROR   [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification ERROR [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification ERROR [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification ERROR [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message] ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testInvalidToken FAILED  [ 71%]
httpTests/otherTests/test_search.py::testNoMatches FAILED                [ 72%]
httpTests/otherTests/test_search.py::testSingleMatch ERROR               [ 72%]
httpTests/otherTests/test_search.py::testCaseInsensitiveMatch ERROR      [ 72%]
httpTests/otherTests/test_search.py::testMultipleMatches ERROR           [ 72%]
httpTests/otherTests/test_search.py::testMultipleChannelsJoined ERROR    [ 73%]
httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels ERROR [ 73%]
httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser ERROR [ 73%]
httpTests/otherTests/test_search.py::testInvalidSearch[] FAILED          [ 74%]
httpTests/otherTests/test_search.py::testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] FAILED [ 74%]
httpTests/otherTests/test_search.py::testInvalidToken FAILED             [ 74%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll FAILED    [ 74%]
httpTests/otherTests/test_users_all.py::testInvalidToken FAILED          [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[True] ERROR [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[False] ERROR [ 75%]
httpTests/standupTests/test_standup_active.py::testActiveStandup ERROR   [ 75%]
httpTests/standupTests/test_standup_active.py::testInactiveStandup ERROR [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidChannelId FAILED [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidToken ERROR    [ 76%]
httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly ERROR [ 77%]
httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut ERROR [ 77%]
httpTests/standupTests/test_standup_send.py::testReturnFormat ERROR      [ 77%]
httpTests/standupTests/test_standup_send.py::testNonMemberCannotStandupSend ERROR [ 77%]
httpTests/standupTests/test_standup_send.py::testSendWhenStandupInactive ERROR [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidMessageLength ERROR [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidChannelId FAILED [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidToken ERROR      [ 78%]
httpTests/standupTests/test_standup_start.py::testStandupStartReturnFormat ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupNoMessages ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testReturnsImmediately ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testStandupAffectsOnlyOneChannel ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testNonmemberCannotStartStandup ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testCannotStartStandupWhenAlreadyActive ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testInvalidStandupLength ERROR [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidChannelId FAILED [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidToken ERROR     [ 81%]
httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect FAILED    [ 81%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate FAILED [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin ERROR [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite ERROR [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave ERROR [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmCreate FAILED   [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmLeave ERROR     [ 83%]
httpTests/statsTests/test_user_stats.py::testSmsTrackedSmRemove ERROR    [ 83%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare ERROR [ 85%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish ERROR [ 85%]
httpTests/statsTests/test_user_stats.py::testInvolvementTracked FAILED   [ 85%]
httpTests/statsTests/test_user_stats.py::testInvalidToken FAILED         [ 86%]
httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect FAILED   [ 86%]
httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate FAILED [ 86%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate FAILED  [ 86%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove ERROR   [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend ERROR [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater ERROR [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm ERROR [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testUtilizationTracked FAILED  [ 89%]
httpTests/statsTests/test_users_stats.py::testInvalidToken FAILED        [ 90%]
httpTests/userTests/test_user_profile.py::testUserProfileValid FAILED    [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser FAILED         [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken FAILED        [ 90%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] FAILED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] FAILED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue FAILED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue FAILED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl FAILED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken FAILED [100%]

====== Marks recorded: 1.40 ======


==================================== ERRORS ====================================
_____________ ERROR at setup of testOnceRemovedUserCantDoAnything ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.45045093637276046', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1359aee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.45045093637276046', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________ ERROR at setup of testMessagesAfterUserRemovalCorrectFormat __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.030633117770983542', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13517e50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.030633117770983542', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testRemovalRemovedFromChannel ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.43136791652610107', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae134c2af0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.43136791652610107', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testRemovalRemovedFromDm __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae134c2ee0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.016513567751549107', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8518521100261152', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5574184354516676', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13464940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5574184354516676', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7102771656085043', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae134a99d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7102771656085043', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9944979874148174', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1346dc10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9944979874148174', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4664969724539034', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1347e940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4664969724539034', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________ ERROR at setup of testChannelOwnerCanAddownerWhenMember ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6420993210540529', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae134ee280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6420993210540529', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________ ERROR at setup of testChannelOwnerCantAddownerWhenNonMember __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7908657653004683', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae134e1550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7908657653004683', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testNonMemberCannotAddOwner _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7084973880383834', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae134ee670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7084973880383834', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________ ERROR at setup of testGlobalOwnerNonMemberCantAddownerPrivate _________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.43446833991301537', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae135009d0>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.43446833991301537', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________ ERROR at setup of testGlobalOwnerNonMemberCantAddownerPublic _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.7502174027217898', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae134e98b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.7502174027217898', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testMemberCannotAddOwner __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.015726670604503612', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae134d51f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.015726670604503612', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________ ERROR at setup of testCannotAddownerPrexistingChannelOwner __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7819095906521538', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae134d5d30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7819095906521538', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________________ ERROR at setup of testWithInvalidUId _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.08136473268976507', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13500310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.08136473268976507', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6398489840470918', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133f7d30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6398489840470918', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testMemberSuccessful ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9500052185549295', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13411700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9500052185549295', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5867736073129035', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133f0040>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5867736073129035', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7485078681906392', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133c9310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7485078681906392', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testDuplicateInvite _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.12753994845500394', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133c9d30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.12753994845500394', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testInviteGlobalOwner ____________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.5972364186514685', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1339fc10>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.5972364186514685', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testInviteGlobalMember ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7561123158046719', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1339e9d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7561123158046719', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testInvitationFromNonChannelMember _____________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1010, token='0.27882889491289253', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133bba60>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1010, token='0.27882889491289253', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________________ ERROR at setup of testUIdInvalid _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5461486444659753', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133c43a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5461486444659753', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testInvalidatedToken ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2867972233433156', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133c4dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2867972233433156', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testGlobalOwnerJoinChannelPublic ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.9140238886770897', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13386ca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.9140238886770897', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testGlobalOwnerJoinChannelPrivate ______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.7090318118371794', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13372280>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.7090318118371794', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testGlobalMemberJoinPublic _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.09081829483238835', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13372ca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.09081829483238835', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testGlobalMemberCantJoinPrivate _______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.7699250465472744', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13387700>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.7699250465472744', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testAlreadyJoinedChannel __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5484834156506042', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1338f160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5484834156506042', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testInvalidatedToken ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.09543940258222272', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1338fe50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.09543940258222272', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testMemberLeaveChannelSuccessfully _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7454075286254254', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1332d940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7454075286254254', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testLeaveChannelWhenNotMember ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.047437866496695236', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13344310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.047437866496695236', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.13703480777754984', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1334d3a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.13703480777754984', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testMessageTimestamp ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6383486872775748', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1334ddc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6383486872775748', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6064077742697511', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13387c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6064077742697511', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.028483897036491124', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133c5280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.028483897036491124', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testRemovalByEditReflected _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.009233786801539745', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13411b80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.009233786801539745', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9637746753550129', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae133d80d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9637746753550129', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________ ERROR at setup of testInputErrorWhenStartGreaterThanMessageNum ________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4349022636623774', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1346d280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4349022636623774', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testAccessErrorWhenUserIsNonMember _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9131024406187211', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13464040>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9131024406187211', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________ ERROR at setup of testAccessErrorWhenInvalidTokenGiven ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8920662151120602', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13318790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8920662151120602', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testOwnerCanRemoveOwner ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7661113609722672', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1331d160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7661113609722672', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testGlobalOwnerMmberCanRemoveOwner _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.28778646095380944', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1331df70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.28778646095380944', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________ ERROR at setup of testGlobalOwnerNonmemberCannotRemoveOwner __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.4077230601330053', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae132f3ee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.4077230601330053', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testNonmemberCannotRemoveOwner _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7629421234308897', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1330a5e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7629421234308897', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testMmberCannotRemoveOwner _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.363784427783751', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1330aee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.363784427783751', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testCannotRemoveLastOwner __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.37073895362872755', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae132f1940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.37073895362872755', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________ ERROR at setup of testGlobalOwnerCannotRemoveOnlyOwner ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.5385704475325943', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae132e7940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.5385704475325943', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testCannotRemoveNonOwner __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2943861824087346', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13307280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2943861824087346', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________________ ERROR at setup of testInvalidUId _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.44502207051790843', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13307ca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.44502207051790843', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testInvalidatedToken ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3867974989397549', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae132ab940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3867974989397549', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testListAfterLeaveChannel __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9342052805935288', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae132a2f70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9342052805935288', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testWhenOneChannelExistsPrivate _______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.9549302484033972', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13307820>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.9549302484033972', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testWhenOneChannelExistsPublic _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.6085569574433509', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae132c91f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.6085569574433509', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testWhenMultipleChannelsExist ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.07394136693588305', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1325af70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.07394136693588305', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testMemberSuccessful ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13248160>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7157087722220925', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.41940508920372377', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae132a23a0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9387378898534215', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9593129673062675', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1323d670>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.07351243387868056', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.4368213899063069', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testMemberLeaveDmSuccessfully ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae132328b0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.814398488725423', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.12394554916925804', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testLeaveDmWhenNotMember __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae132093a0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.7395529666353045', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.12562296597667344', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1320a820>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18513813683074143', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7331331795746663', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testWhenInOneDm _______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1320eb80>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.675869309040896', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.13603581867228343', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testListAfterLeaveDm ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1323d040>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.06917989483874876', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.4233594199342592', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13268820>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.06408259505893765', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8108995087103819', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae132c6310>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6835003425533484', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.3449279335982156', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testRemovalByEditReflected _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae133341f0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9153691664706392', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.43053959132361364', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae131ffe50>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8569137301465521', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.22458762493565554', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________ ERROR at setup of testInputErrorWhenStartGreaterThanMessageNum ________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae131cfd30>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.30905946215868507', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.11115055255585338', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________ ERROR at setup of testAccessErrorWhenUserIsNonMember _____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13192af0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.7534676721931326', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.21794639291273676', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________ ERROR at setup of testAccessErrorWhenInvalidTokenGiven ____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae131a54c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5644672753332471', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.863297384846988', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________________ ERROR at setup of testSuccessfulDmRemoval ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13169280>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18997794256507805', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9694894407722594', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testRemovalRemovesMessages _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13169d30>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.31959671517220034', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.43739542648850493', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testNonownerCannotRemoveDm _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13161a60>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.334444471461564', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.6710177166096165', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testOwnerNonmemberCannotRemoveDm ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae131919d0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6875427134132626', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.23332427356168406', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidDmId _______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1317e8b0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.21646579952340184', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.18187834432862982', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1315c700>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5090111026863222', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5865930593203732', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testOriginalPosterCanEditMessageChannel ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6459443202346207', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae131135e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6459443202346207', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testOriginalPosterCanEditMessageDm _____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13113ee0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7750524231808058', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.4261173075710276', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testGlobalOwnerCantEditMembersMessageDm ___________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13140310>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.6212429284723138', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.5792814787497218', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testEmptyEditDeletesMessage _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.47542994607613176', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13140c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.47542994607613176', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testInvalidMessageLength __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.891832829895715', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13143670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.891832829895715', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testCannotEditDeletedMessage ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8449950542621469', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13143f70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8449950542621469', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testNonownerNonposterCantEdit ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9408199548620158', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1310caf0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9408199548620158', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.22235024738606968', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae130e7550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.22235024738606968', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testMessageIdsUnique ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1310d430>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7543029827793768', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.899639321165786', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testMessageIdsUniqueIter3 __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae130f8700>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.43278827732866', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.8762824354477259', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testSuccessfulPinChannelOwnerInChannel ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5745583944851769', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13099670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5745583944851769', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testSuccessfulPinDmOwnerInDm ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13099ee0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.004922204652562767', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.4157358371762032', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testSuccessfulPinGlobalOwnerInChannel ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.015979117531635723', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae130beee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.015979117531635723', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________________ ERROR at setup of testCannotPinTwice _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7349726712906566', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae130bf5e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7349726712906566', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testChannelMemberCantPin __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7888457089219891', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae130bfee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7888457089219891', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testDmMemberCantPin _____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1308c940>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.9552800535892136', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.8561259130907082', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________ ERROR at setup of testGlobalOwnerCantPinInDm _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1327fd30>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.6096848469092804', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.28007357198813776', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testNonmemberCantPin ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4438669281217227', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae131ff940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4438669281217227', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4271634531208788', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1306e5e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4271634531208788', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testSuccessfulReactInChannel ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.04298123355000216', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1306eee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.04298123355000216', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testSuccessfulReactToDmMessage _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae1307fdc0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6813443102287207', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.789126465961185', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testInvalidReactId _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8311462770657139', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1308eb80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8311462770657139', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________________ ERROR at setup of testCantReactTwice _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5091128383232348', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae130555e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5091128383232348', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testNonmemberCannotReact __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1867149441379683', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae130454c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1867149441379683', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.21392174355979265', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13045ee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.21392174355979265', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testOriginalPosterCanRemoveMessage _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.19835552349991947', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1303f9d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.19835552349991947', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________ ERROR at setup of testGlobalOwnerCantRemoveMembersMessageDm __________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae13021940>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.950949551149356', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.7602072686860148', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testCannotRemoveDeletedMessage _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9480589345884791', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae13055f70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9480589345884791', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________ ERROR at setup of testNonownerNonposterCantRemoveMessage ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7713439188452811', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1302c820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7713439188452811', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9196492269021261', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1302e1f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9196492269021261', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testValidMessage ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.23881030978066864', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae1302ec10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.23881030978066864', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________________ ERROR at setup of testNonmemberPost ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18306374203829456', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ff2670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18306374203829456', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testInvalidMessage[] ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2999547789495842', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12fd28b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2999547789495842', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4259094359478186', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12fde310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4259094359478186', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7734360565632961', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12fded30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7734360565632961', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testValidMessage ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12ff6790>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3663793390231622', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9807505879127263', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testNonmemberPost ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12fce5e0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.5504010789120164', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.4337136078893489', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessage[] ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12fc0af0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9789013244188771', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.1853614129462977', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12faa940>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5420394386927452', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.2991624964151631', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12fad790>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4369571998449757', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8383419466336393', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testValidFutureMessage ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7548200453061387', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12f795e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7548200453061387', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testReturnsImmediately ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.27010337380309823', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12f79ee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.27010337380309823', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testInvalidReturnedIdUntilSent _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4421639392084673', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12f8caf0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4421639392084673', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testNonmemberCannotSendlater ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.4726412590596032', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12f85940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.4726412590596032', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________ ERROR at setup of testCannotTimeTravelAkaSendMessageInPast __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7126353943853769', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12f554c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7126353943853769', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testInvalidMessage[] ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9590045488757013', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12f55dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9590045488757013', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8361283046592076', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12f73820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8361283046592076', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________________ ERROR at setup of testInvalidChannel _____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12f3c280>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2964703330812346', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5783549593300494', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6738547624185709', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12f3cf70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6738547624185709', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testValidFutureMessage ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12f1faf0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7950744568503259', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.2788556965158828', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testReturnsImmediately ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12f4b940>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5312246135817547', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.11897240528533004', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testInvalidReturnedIdUntilSent _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12f12820>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7347873624274053', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.1516042373262385', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testNonmemberCannotSendlater ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12f49670>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.9618826652562538', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.9288870496290973', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testCannotTimeTravelAkaSendMessageInPast __________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12efc9d0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.658244693398609', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5679096971500066', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________ ERROR at setup of testInvalidMessage[] ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12ff2c10>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9893940410853443', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.3842979736128176', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae130a8550>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7672937341351702', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.3527104837256614', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________ ERROR at setup of testInvalidDm ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.06648010720345576', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12efa790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.06648010720345576', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12ef81f0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6795666100076299', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9331910992496413', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testSuccessfulShareToChannel ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2036814052732452', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ef8ee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2036814052732452', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testSuccessfulShareToDm ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12f07a60>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8698862811749646', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.13807496884734882', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testSuccessfulCrossShare[True] _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.20823488042265792', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ea98b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.20823488042265792', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testSuccessfulCrossShare[False] _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3833967988325775', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ec4550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3833967988325775', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testCannotShareToUnjoinedDm _________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.6349276257135246', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ec4f70>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.6349276257135246', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testCannotShareToUnjoinedChannel ______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.38445897529766326', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e9c9d0>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.38445897529766326', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testCannotShareFromUnjoinedChannel _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.1467263515416517', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ec2940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.1467263515416517', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testCannotShareFromUnjoinedDm ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12eb4790>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.19319994647485284', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.9564135430868239', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testInvalidOgMessageId ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2529581214252392', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e8e160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2529581214252392', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testInvalidMessageLength __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.427091580473389', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e8eb80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.427091580473389', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testShareToInvalidChannelId _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12e575e0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9951648504193982', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.4716914795977529', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testShareToInvalidDmId ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.43638788615593227', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e76430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.43638788615593227', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8979808029648826', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e76e50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8979808029648826', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________ ERROR at setup of testSuccessfulUnpinChannelOwnerInChannel __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7935374087829645', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e70940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7935374087829645', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testSuccessfulUnpinDmOwnerInDm _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12e4e310>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3516908235891012', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7498505333702545', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________ ERROR at setup of testSuccessfulUnpinGlobalOwnerInChannel ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.14905365146408744', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e4d670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.14905365146408744', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testCannotUnpinTwice ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.11503538888011677', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e41a60>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.11503538888011677', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testChannelMemberCantUnpin _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6836551200299565', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e1f820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6836551200299565', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testDmMemberCantUnpin ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12df2700>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.15279974733038526', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.964632924284277', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________ ERROR at setup of testGlobalOwnerCantUnpinInDm ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12df2dc0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.16556969348685358', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.6164369937641032', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________ ERROR at setup of testNonmemberCantUnpin ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.13523657116923649', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12dfdb80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.13523657116923649', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5777937895140668', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ddc5e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5777937895140668', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testSuccessfulUnreactInChannel _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.33831643260940814', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ddcee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.33831643260940814', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testSuccessfulUnreactToDmMessage ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12de0e50>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.38068261249763813', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5036544665311293', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________ ERROR at setup of testInvalidReactId _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7934318933758491', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12decaf0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7934318933758491', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testCantUnreactTwice ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.16501921881422565', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12dc9550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.16501921881422565', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testNonmemberCannotUnreact _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3538869301424705', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12db1430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3538869301424705', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7405136144834732', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12db1e50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7405136144834732', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________ ERROR at setup of testTagThruMessageSendTriggersNotification _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5176384787897275', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d860d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5176384787897275', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testTagNotInChannel _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6771284703954128', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d86e50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6771284703954128', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________ ERROR at setup of testMultipleSameTagsOnlyOneNotification ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.970730656313693', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d54dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.970730656313693', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________________ ERROR at setup of testTagSelf _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6916241456160235', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d7d8b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6916241456160235', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testMultipleTags ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.177757145031463', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d59c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.177757145031463', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________ ERROR at setup of testTagThruMessageSenddmTriggersNotification ________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12d8baf0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7854905391977078', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7563587699887369', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________ ERROR at setup of testTagThruMessageEditTriggersNotification _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5914737730627544', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d549d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5914737730627544', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________ ERROR at setup of testTagThruMessageShareTriggersNotification _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.0698784634822871', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d4e160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.0698784634822871', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______ ERROR at setup of testTagThruMessageSendlaterTriggersNotification _______

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9338943410698337', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d4ef70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9338943410698337', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________ ERROR at setup of testMessageSendlaterTagNotifiesWhenSent ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6608729411277712', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d3de50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6608729411277712', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____ ERROR at setup of testTagThruMessageSendlaterdmTriggersNotification ______

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12d24d30>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18032384455236272', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5729508623610398', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__ ERROR at setup of testTagNotificationMessagePreviewLength[a small message] __

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9694180808415538', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12e8e700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9694180808415538', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_ ERROR at setup of testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8044113175270664', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d3dc10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8044113175270664', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testReactTriggersNotification[ch] ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8109639117923133', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d59310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8109639117923133', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testReactTriggersNotification[dm] ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.07488146616689662', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d18e50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.07488146616689662', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________ ERROR at setup of testAddThruChInviteTriggersNotification ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9295043038911359', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12cf3d30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9295043038911359', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________ ERROR at setup of testAddThruDmCreateTriggersNotification ___________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12d3dd30>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9317600672740229', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.6644303443598987', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testMostRecent_20NotificationsFetched ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5154986118002212', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d00820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5154986118002212', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testSingleMatch _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.20271830896891507', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d0dd30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.20271830896891507', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testCaseInsensitiveMatch __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.05462640045548395', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12cf5790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.05462640045548395', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testMultipleMatches _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4017496522422557', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12cf91f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4017496522422557', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testMultipleChannelsJoined _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.5457956071705277', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12cf9f70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.5457956071705277', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________ ERROR at setup of testSearchIncludesOnlyJoinedChannels ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.14360012579612458', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c54f70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.14360012579612458', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________ ERROR at setup of testSearchMatchesMoreThanJustAuthorisedUser _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9614811336609981', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c74dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9614811336609981', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testCorrectReturnFormat[True] ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.13013758988445234', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c74b80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.13013758988445234', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testCorrectReturnFormat[False] _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9506010467771129', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12cf99d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9506010467771129', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________________ ERROR at setup of testActiveStandup ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2606533247460552', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c8aca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2606533247460552', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________ ERROR at setup of testInactiveStandup _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.15820021630348347', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12ca4700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.15820021630348347', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6046474631886405', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12cb6820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6046474631886405', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________ ERROR at setup of testMessagesBufferedAndDisplayedCorrectly __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5263759059590847', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c31670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5263759059590847', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testStandupSendsAfterLoggedOut _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.20117342554505124', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c2a4c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.20117342554505124', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testReturnFormat ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8777761546119192', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c2aee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8777761546119192', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testNonMemberCannotStandupSend _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9368377695624133', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c4adc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9368377695624133', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testSendWhenStandupInactive _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8634049625194682', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c42940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8634049625194682', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testInvalidMessageLength __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.053711669767555925', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c163a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.053711669767555925', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18608162697890274', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c169d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18608162697890274', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testStandupStartReturnFormat ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9496726011798327', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12be13a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9496726011798327', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testStandupNoMessages ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7435365183750047', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12be1dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7435365183750047', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testReturnsImmediately ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.42566742083995956', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c03820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.42566742083995956', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testStandupRestartableAfterLapse ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6719608896622389', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12be9280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6719608896622389', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testStandupAffectsOnlyOneChannel ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4693501856420397', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12bdf160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4693501856420397', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testNonmemberCannotStartStandup _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.8454491921612948', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12bdfee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.8454491921612948', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________ ERROR at setup of testCannotStartStandupWhenAlreadyActive ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5851959204729749', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c02af0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5851959204729749', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
__________________ ERROR at setup of testInvalidStandupLength __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9281222374291953', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12bb74c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9281222374291953', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.368248485669862', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12be9c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.368248485669862', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_______________ ERROR at setup of testChannelsTrackedChannelJoin _______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.9993932512591785', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12bc7f70>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.9993932512591785', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testChannelsTrackedChannelInvite ______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.10586793105924497', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12bcbee0>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.10586793105924497', handleStr='')
name = 'zergs lair', isPublic = False

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testChannelsTrackedChannelLeave _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.12315362066634172', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b9c940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.12315362066634172', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testSmsTrackedSmLeave ____________________
file /import/kamen/3/cs1531/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py, line 96
  @iteration3
  def testSmsTrackedSmLeave(userWoody, woodyAndBuzzSm, ctx):
E       fixture 'woodyAndBuzzSm' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, channelFactory, ctx, dmFactory, doctest_namespace, img, include_metadata_in_junit_xml, messageFactory, metadata, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, snapshot, standupFactory, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, userBuzz, userFactory, userWoody, userZerg, woodyAndBuzzDm, woodysPublicToybox, zergsPrivateLair
>       use 'pytest --fixtures [testpath]' for help on them.

/import/kamen/3/cs1531/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py:96
___________________ ERROR at setup of testSmsTrackedSmRemove ___________________
file /import/kamen/3/cs1531/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py, line 107
  @iteration3
  def testSmsTrackedSmRemove(userWoody, userBuzz, woodyAndBuzzSm, ctx):
E       fixture 'woodyAndBuzzSm' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, channelFactory, ctx, dmFactory, doctest_namespace, img, include_metadata_in_junit_xml, messageFactory, metadata, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, snapshot, standupFactory, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, userBuzz, userFactory, userWoody, userZerg, woodyAndBuzzDm, woodysPublicToybox, zergsPrivateLair
>       use 'pytest --fixtures [testpath]' for help on them.

/import/kamen/3/cs1531/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py:107
_______________ ERROR at setup of testMessagesTrackedMessageSend _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5371486234782095', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b534c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5371486234782095', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________ ERROR at setup of testMessagesTrackedMessageSendlater _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2630929701502953', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b9cee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2630929701502953', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testMessagesTrackedMessageSenddm ______________
file /import/kamen/3/cs1531/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py, line 144
  @iteration3
  def testMessagesTrackedMessageSenddm(userWoody, woodyAndBuzzSm, messageFactory, ctx):
E       fixture 'woodyAndBuzzSm' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, channelFactory, ctx, dmFactory, doctest_namespace, img, include_metadata_in_junit_xml, messageFactory, metadata, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, snapshot, standupFactory, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, userBuzz, userFactory, userWoody, userZerg, woodyAndBuzzDm, woodysPublicToybox, zergsPrivateLair
>       use 'pytest --fixtures [testpath]' for help on them.

/import/kamen/3/cs1531/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py:144
___________ ERROR at setup of testMessagesTrackedMessageSenddmlater ____________
file /import/kamen/3/cs1531/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py, line 155
  @iteration3
  def testMessagesTrackedMessageSenddmlater(userWoody, woodyAndBuzzSm, messageFactory, ctx):
E       fixture 'woodyAndBuzzSm' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, channelFactory, ctx, dmFactory, doctest_namespace, img, include_metadata_in_junit_xml, messageFactory, metadata, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, snapshot, standupFactory, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, userBuzz, userFactory, userWoody, userZerg, woodyAndBuzzDm, woodysPublicToybox, zergsPrivateLair
>       use 'pytest --fixtures [testpath]' for help on them.

/import/kamen/3/cs1531/project-automarking/tempstore/httpTests/statsTests/test_user_stats.py:155
______________ ERROR at setup of testMessagesTrackedMessageShare _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1938976465430129', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b58820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1938976465430129', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testMessagesTrackedStandupFinish ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.40128133354006335', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12bcb790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.40128133354006335', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
___________________ ERROR at setup of testDmsTrackedDmRemove ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12cf95e0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6588314243272475', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.6726138788592433', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________ ERROR at setup of testMessagesTrackedMessageSend _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9155661059581783', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b5b430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9155661059581783', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________ ERROR at setup of testMessagesTrackedMessageSendlater _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7207298273342169', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12d00280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7207298273342169', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testMessagesTrackedMessageSenddm ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12cf3b80>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7416975420146568', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9799203870394517', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________ ERROR at setup of testMessagesTrackedMessageSenddmlater ____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12b1d4c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5433811899725356', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.23160365715250597', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________ ERROR at setup of testMessagesTrackedMessageShare _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3545323510545513', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b3b280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3545323510545513', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
______________ ERROR at setup of testMessagesTrackedStandupFinish ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5528535750040524', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b3bca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5528535750040524', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_____________ ERROR at setup of testMessagesTrackedEditedToRemoval _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.17850112680612873', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b30700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.17850112680612873', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
_________________ ERROR at setup of testMessagesTrackedDeleted _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8171680499877769', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b36040>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8171680499877769', handleStr='')
name = 'woodys toybox', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
________________ ERROR at setup of testMessagesTrackedDmRemoved ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12b36b80>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6235656007817427', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8038601294864682', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
=================================== FAILURES ===================================
_______________ testRemovedProfileStillFetchableWithUserProfile ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.08320815867822051', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.12551695472619673', handleStr='')
ctx = None

    @iteration3
    def testRemovedProfileStillFetchableWithUserProfile(userWoody, userZerg, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________________ testRemovalNotInUsersAll ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6560905547178402', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.4010769255904929', handleStr='')
ctx = None

    @iteration3
    def testRemovalNotInUsersAll(userWoody, userZerg, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________________ testEmailReusable _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3912890727853211', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.38954775093242855', handleStr='')
ctx = None

    @iteration3
    def testEmailReusable(userWoody, userZerg, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________________ testHandleReusable ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5349589061842241', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.46337695318991745', handleStr='')
ctx = None

    @iteration3
    def testHandleReusable(userWoody, userZerg, ctx):
>       adminUserRemove(userWoody.token, userZerg.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2951377285109258', handleStr='')
ctx = None

    @iteration3
    def testInvalidUser(userWoody, ctx):
        with pytest.raises(InputError):
>           adminUserRemove(userWoody.token, -1, ctx)

httpTests/adminTests/test_admin_user_remove.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________________ testCannotRemoveLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7646501058807131', handleStr='')
ctx = None

    @iteration3
    def testCannotRemoveLastOwner(userWoody, ctx):
        with pytest.raises(InputError):
>           adminUserRemove(userWoody.token, userWoody.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_________________________ testCannotRemoveUserNonowner _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9197532400622226', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.499141853046694', handleStr='')
ctx = None

    @iteration3
    def testCannotRemoveUserNonowner(userWoody, userBuzz, ctx):
        with pytest.raises(AccessError):
>           adminUserRemove(userBuzz.token, userWoody.uId, ctx)

httpTests/adminTests/test_admin_user_remove.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6714667376768682', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9213514626010704', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, userBuzz, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/adminTests/test_admin_user_remove.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________________ testSuccessfulPermissionChange ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7825271526437318', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7839733265508022', handleStr='')
ctx = None

    @iteration3
    def testSuccessfulPermissionChange(userWoody, userBuzz, ctx):
>       adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________________ testCannotDemoteLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4332134043922362', handleStr='')
ctx = None

    @iteration3
    def testCannotDemoteLastOwner(userWoody, ctx):
        with pytest.raises(InputError):
>           adminUserpermissionChange(userWoody.token, userWoody.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ testNonownerCantChangePermissions _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4618172424027278', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7692495417780996', handleStr='')
ctx = None

    @iteration3
    def testNonownerCantChangePermissions(userWoody, userBuzz, ctx):
        with pytest.raises(AccessError):
>           adminUserpermissionChange(userBuzz.token, userWoody.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.412273032297541', handleStr='')
ctx = None

    @iteration3
    def testInvalidUser(userWoody, ctx):
        with pytest.raises(InputError):
>           adminUserpermissionChange(userWoody.token, -1, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________________ testInvalidPermission _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6463722028415808', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.6699809317681742', handleStr='')
ctx = None

    @iteration3
    def testInvalidPermission(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, 1531, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________________ testSamePermission ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8171387760876185', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.44217277109031294', handleStr='')
ctx = None

    @iteration3
    def testSamePermission(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:23: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.09583136091904088', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.031247667163763815', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, userBuzz, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________________ testCanHaveTwoSessions ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.921067728109044', handleStr='')
ctx = None

    @pytest.mark.overrideMarks(2)
    def testCanHaveTwoSessions(userWoody, ctx):
        session2 = authLogin(userWoody.email, userWoody.password, ctx)
    
        # succeeds
>       assert userProfile(session2['token'], userWoody.uId, ctx) == userProfile(userWoody.token, userWoody.uId, ctx)

httpTests/authTests/test_auth_login.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testUnregisteredUser _____________________________

ctx = None

    def testUnregisteredUser(ctx):
        #  this test also covers 'invalid' emails, as an invalid email belongs to no user
        with pytest.raises(InputError):
>           authLogin('bob.jane@example.com', 'qazwsx!!', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_login.py:41: Failed
______________________ testRegisteredButIncorrectPassword ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7000976919575732', handleStr='')
ctx = None

    def testRegisteredButIncorrectPassword(userWoody, ctx):
        with pytest.raises(InputError):
>           authLogin(userWoody.email, userWoody.password + 'AAAAAA', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_login.py:46: Failed
_____________________________ testSuccessfulLogout _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8544516749922395', handleStr='')
ctx = None

    def testSuccessfulLogout(userWoody, ctx):
>       assert authLogout(userWoody.token, ctx) is not None

httpTests/authTests/test_auth_logout.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________________ testInvalidEmail[@gmail.com] _________________________

email = '@gmail.com', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(InputError):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:22: Failed
____________________________ testInvalidEmail[bob] _____________________________

email = 'bob', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(InputError):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:22: Failed
______________________ testInvalidEmail[bob@bob@bob.com] _______________________

email = 'bob@bob@bob.com', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(InputError):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:22: Failed
__________________________ testInvalidPassword[12345] __________________________

password = '12345', ctx = None

    @pytest.mark.parametrize('password', ['12345', ''])
    def testInvalidPassword(password, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, password, FIRST, LAST, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:29: Failed
____________________________ testInvalidPassword[] _____________________________

password = '', ctx = None

    @pytest.mark.parametrize('password', ['12345', ''])
    def testInvalidPassword(password, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, password, FIRST, LAST, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:29: Failed
____________________________ testInvalidNameFirst[] ____________________________

nameFirst = '', ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'a' * 51])
    def testInvalidNameFirst(nameFirst, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, PASSWORD, nameFirst, LAST, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:36: Failed
__ testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] ___

nameFirst = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'a' * 51])
    def testInvalidNameFirst(nameFirst, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, PASSWORD, nameFirst, LAST, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:36: Failed
____________________________ testInvalidNameLast[] _____________________________

nameLast = '', ctx = None

    @pytest.mark.parametrize('nameLast', ['', 'b' * 51])
    def testInvalidNameLast(nameLast, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, PASSWORD, FIRST, nameLast, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:43: Failed
___ testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] ___

nameLast = 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', ctx = None

    @pytest.mark.parametrize('nameLast', ['', 'b' * 51])
    def testInvalidNameLast(nameLast, ctx):
        with pytest.raises(InputError):
>           authRegister(EMAIL, PASSWORD, FIRST, nameLast, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:43: Failed
______________________________ testDuplicateEmail ______________________________

ctx = None

    def testDuplicateEmail(ctx):
        authRegister('ab@gmail.com', 'password1', 'name-first-a', 'name-last-a', ctx)
        with pytest.raises(InputError):
>           authRegister('ab@gmail.com', 'password2', 'name-first-b', 'name-last-b', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/authTests/test_auth_register.py:50: Failed
_____________________________ testRemovedUserName ______________________________

ctx = None

    def testRemovedUserName(ctx):
        session = authRegister('abc@gmail.com', 'password1', 'Removed', 'user', ctx)
>       profile = userProfile(session['token'], session['authUserId'], ctx)['user']

httpTests/authTests/test_auth_register.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________________________ testSuccessfulRegistration __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8156763293362128', handleStr='')
ctx = None

    def testSuccessfulRegistration(userWoody, ctx):
>       woodyProf = userProfile(userWoody.token, userWoody.uId, ctx)['user']

httpTests/authTests/test_auth_register.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________ testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] _____________

nameFirst = 'Bob', nameLast = 'Smith', expectedHandle = 'bobsmith', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']

httpTests/authTests/test_auth_register.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_ testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] _

nameFirst = 'ababababab', nameLast = 'cdcdcdcdcdcd'
expectedHandle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']

httpTests/authTests/test_auth_register.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________________ testReturnFormatCorrect ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4968472676302367', handleStr='')
ctx = None

    @iteration3
    def testReturnFormatCorrect(userWoody, ctx):
>       assert authPasswordresetRequest(userWoody.email, ctx) == {}

httpTests/authTests/test_passwordreset_request.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:46: in authPasswordresetRequest
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________ testPasswordRequestLogsOutEverywhere _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.658504560966299', handleStr='')
ctx = None

    @iteration3
    def testPasswordRequestLogsOutEverywhere(userWoody, ctx):
        sess2 = authLogin(userWoody.email, userWoody.password, ctx)
    
>       authPasswordresetRequest(userWoody.email, ctx)

httpTests/authTests/test_passwordreset_request.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:46: in authPasswordresetRequest
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidPassword ______________________________

ctx = None

    @iteration3
    def testInvalidPassword(ctx):
        with pytest.raises(InputError):
>           authPasswordresetReset('ur a wizard herry', 'ord', ctx)

httpTests/authTests/test_passwordreset_reset.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:56: in authPasswordresetReset
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________________ testWithInvalidChannelId ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.19901382087405772', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8576344240777767', handleStr='')
ctx = None

    def testWithInvalidChannelId(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           channelAddowner(userWoody.token, -1, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.24606506339373868', handleStr='')
ctx = None

    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           channelDetails(userWoody.token, -1, ctx)

httpTests/channelTests/test_channel_details.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:25: in channelDetails
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testChannelIdInvalid _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8178474642343541', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7258316501674249', handleStr='')
ctx = None

    def testChannelIdInvalid(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           channelInvite(userWoody.token, -1, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_invite.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:12: in channelInvite
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________________ testJoinInvalidChannelId ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1578997825792794', handleStr='')
ctx = None

    def testJoinInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           channelJoin(userWoody.token, -1, ctx)

httpTests/channelTests/test_channel_join.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:64: in channelJoin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4056527415221367', handleStr='')
ctx = None

    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           channelLeave(userWoody.token, -1, ctx)

httpTests/channelTests/test_channel_leave.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:51: in channelLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ testInputErrorWhenChannelIdInvalid ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7675415589056636', handleStr='')
ctx = None

    def testInputErrorWhenChannelIdInvalid(userWoody, ctx):
        with pytest.raises(InputError):
>           channelMessages(userWoody.token, -1, 0, ctx)

httpTests/channelTests/test_channel_messages.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:38: in channelMessages
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________________ testWithInvalidChannelId ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.07984449656350212', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9354640892250279', handleStr='')
ctx = None

    def testWithInvalidChannelId(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           channelRemoveowner(userWoody.token, -1, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:90: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________ testCreateChannel[True-andys room] ______________________

name = 'andys room', isPublic = True
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.8205304585602897', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.6414105990993808', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testCreateChannel(name, isPublic, userZerg, userWoody, ctx):
>       chId = channelsCreate(userZerg.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/channels_tests/test_channels_create.py:18: KeyError
_____________________ testCreateChannel[False-andys room] ______________________

name = 'andys room', isPublic = False
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.577231991091071', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.7697724043279368', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testCreateChannel(name, isPublic, userZerg, userWoody, ctx):
>       chId = channelsCreate(userZerg.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/channels_tests/test_channels_create.py:18: KeyError
_____________________ testInvalidChannelNameLength[True-] ______________________

name = '', isPublic = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6748102875622133', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['', 'I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testInvalidChannelNameLength(name, isPublic, userWoody, ctx):
        with pytest.raises(InputError):
>           channelsCreate(userWoody.token, name, isPublic, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_create.py:34: Failed
_ testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

name = 'I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG', isPublic = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8214727321240904', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['', 'I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testInvalidChannelNameLength(name, isPublic, userWoody, ctx):
        with pytest.raises(InputError):
>           channelsCreate(userWoody.token, name, isPublic, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_create.py:34: Failed
_____________________ testInvalidChannelNameLength[False-] _____________________

name = '', isPublic = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7096935264454656', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['', 'I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testInvalidChannelNameLength(name, isPublic, userWoody, ctx):
        with pytest.raises(InputError):
>           channelsCreate(userWoody.token, name, isPublic, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_create.py:34: Failed
_ testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

name = 'I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG', isPublic = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.15559366355364346', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['', 'I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testInvalidChannelNameLength(name, isPublic, userWoody, ctx):
        with pytest.raises(InputError):
>           channelsCreate(userWoody.token, name, isPublic, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_create.py:34: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9419817195148061', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/channels_tests/test_channels_create.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testWhenInNoChannels _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8374530079644487', handleStr='')
ctx = None

    def testWhenInNoChannels(userWoody, ctx):
>       assert channelsList(userWoody.token, ctx)['channels'] == []

httpTests/channels_tests/test_channels_list.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:13: in channelsList
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________ testWhenInOneChannel[True-andy] ________________________

name = 'andy', isPublic = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6579929592661464', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testWhenInOneChannel(name, isPublic, userWoody, ctx):
>       ch = channelsCreate(userWoody.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/channels_tests/test_channels_list.py:22: KeyError
_______________________ testWhenInOneChannel[False-andy] _______________________

name = 'andy', isPublic = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7283104471851412', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testWhenInOneChannel(name, isPublic, userWoody, ctx):
>       ch = channelsCreate(userWoody.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/channels_tests/test_channels_list.py:22: KeyError
_______________ testWhenInMultipleChannels[False-True-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = True, isPublic2 = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2802929085482344', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
>       ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/channels_tests/test_channels_list.py:34: KeyError
______________ testWhenInMultipleChannels[False-False-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = False, isPublic2 = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6688833639641798', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
>       ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/channels_tests/test_channels_list.py:34: KeyError
_______________ testWhenInMultipleChannels[True-True-ZERG-andy] ________________

name1 = 'andy', name2 = 'ZERG', isPublic1 = True, isPublic2 = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2987341436148019', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
>       ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/channels_tests/test_channels_list.py:34: KeyError
_______________ testWhenInMultipleChannels[True-False-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = False, isPublic2 = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.25248594948924863', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
>       ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/channels_tests/test_channels_list.py:34: KeyError
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6767638934739568', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/channels_tests/test_channels_list.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________________ testWhenNoChannels ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5561341998229299', handleStr='')
ctx = None

    def testWhenNoChannels(userWoody, ctx):
>       assert channelsListall(userWoody.token, ctx)['channels'] == []

httpTests/channels_tests/test_channels_listall.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:26: in channelsListall
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.025832362347545157', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/channels_tests/test_channels_listall.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________________ testSuccessfulDmCreation ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5633389373684876', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.36911508852075015', handleStr='')
ctx = None

    def testSuccessfulDmCreation(userWoody, userBuzz, ctx):
>       aDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)

httpTests/dmTests/test_dm_create.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________________________ testDmNameCreationMultiple __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.19325542412457475', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.21513215828904686', handleStr='')
ctx = None

    def testDmNameCreationMultiple(userWoody, userBuzz, ctx):
>       theDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)

httpTests/dmTests/test_dm_create.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testDmToInvalidUsers _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.0983470823967727', handleStr='')
ctx = None

    def testDmToInvalidUsers(userWoody, ctx):
        with pytest.raises(InputError):
>           dmCreate(userWoody.token, [userWoody.uId + 1531, userWoody.uId + 6080, userWoody.uId + 6771], ctx)

httpTests/dmTests/test_dm_create.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________________________ testDmToUsersButOneInvalid __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.925424308907481', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5336692916956423', handleStr='')
ctx = None

    def testDmToUsersButOneInvalid(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           dmCreate(userWoody.token, [userBuzz.uId, -1], ctx)

httpTests/dmTests/test_dm_create.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________________________ testDmToUsersButDuplicate ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.09414928984926685', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8622798082554997', handleStr='')
ctx = None

    def testDmToUsersButDuplicate(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           dmCreate(userWoody.token, [userBuzz.uId, userBuzz.uId], ctx)

httpTests/dmTests/test_dm_create.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.24446320263307042', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/dmTests/test_dm_create.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidDmId ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.10512675306606223', handleStr='')
ctx = None

    def testInvalidDmId(userWoody, ctx):
        with pytest.raises(InputError):
>           dmDetails(userWoody.token, -1, ctx)

httpTests/dmTests/test_dm_details.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:13: in dmDetails
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidDmId ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3055842906488764', handleStr='')
ctx = None

    def testInvalidDmId(userWoody, ctx):
        with pytest.raises(InputError):
>           dmLeave(userWoody.token, -1, ctx)

httpTests/dmTests/test_dm_leave.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:65: in dmLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________________ testWhenInMultipleDms _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.47356080586538396', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae131ff550>, ctx = None

    def testWhenInMultipleDms(userWoody, dmFactory, ctx):
>       dm_1 = dmFactory(userWoody, [])

httpTests/dmTests/test_dm_list.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7688096431157161', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/dmTests/test_dm_list.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________________ testInputErrorWhenDmIdInvalid _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.08130370265324438', handleStr='')
ctx = None

    def testInputErrorWhenDmIdInvalid(userWoody, ctx):
        with pytest.raises(InputError):
>           dmMessages(userWoody.token, -1, 0, ctx)

httpTests/dmTests/test_dm_messages.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:78: in dmMessages
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidMessageId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.09916341238665916', handleStr='')
ctx = None

    @iteration3
    def testInvalidMessageId(userWoody, ctx):
        with pytest.raises(InputError):
>           messagePin(userWoody.token, -1, ctx)

httpTests/messageTests/test_message_pin.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:50: in messagePin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidMessageId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3197366249275284', handleStr='')
ctx = None

    @iteration3
    def testInvalidMessageId(userWoody, ctx):
        with pytest.raises(InputError):
>           messageReact(userWoody.token, -1, REACT, ctx)

httpTests/messageTests/test_message_react.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:76: in messageReact
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________________ testInvalidChannel ______________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.4257156248283198', handleStr='')
ctx = None

    def testInvalidChannel(userBuzz, ctx):
        with pytest.raises(InputError):
>           messageSend(userBuzz.token, -1, 'Hello world', ctx)

httpTests/messageTests/test_message_send.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________________________ testInvalidDm _________________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.9323604168886479', handleStr='')
ctx = None

    def testInvalidDm(userBuzz, ctx):
        with pytest.raises(InputError):
>           messageSenddm(userBuzz.token, -1, 'Hello world', ctx)

httpTests/messageTests/test_message_senddm.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidMessageId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.48956325583107785', handleStr='')
ctx = None

    @iteration3
    def testInvalidMessageId(userWoody, ctx):
        with pytest.raises(InputError):
>           messageUnpin(userWoody.token, -1, ctx)

httpTests/messageTests/test_message_unpin.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:63: in messageUnpin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidMessageId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4185004880305052', handleStr='')
ctx = None

    @iteration3
    def testInvalidMessageId(userWoody, ctx):
        with pytest.raises(InputError):
>           messageUnreact(userWoody.token, -1, REACT, ctx)

httpTests/messageTests/test_message_unreact.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:89: in messageUnreact
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________________________ testClearWorks ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.44468811408788045', handleStr='')
userFactory = <function userFactory.<locals>.makeUser at 0x7fae12dc9af0>
ctx = None

    def testClearWorks(userWoody, userFactory, ctx):
        # an existing user can do something
>       assert usersAll(userWoody.token, ctx) is not None

httpTests/otherTests/test_clear.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:11: in usersAll
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.0855858703822081', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________________________ testNoMatches _________________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.29548211091243903', handleStr='')
ctx = None

    @iteration3
    def testNoMatches(userBuzz, ctx):
>       msgs = search(userBuzz.token, 'No matches', ctx)

httpTests/otherTests/test_search.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidSearch[] ______________________________

queryStr = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5196094883289861', handleStr='')
ctx = None

    @iteration3
    @pytest.mark.parametrize('queryStr', ['', 'a' * 1001])
    def testInvalidSearch(queryStr, userWoody, ctx):
        with pytest.raises(InputError):
>           search(userWoody.token, queryStr, ctx)

httpTests/otherTests/test_search.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_ testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

queryStr = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9223401945598588', handleStr='')
ctx = None

    @iteration3
    @pytest.mark.parametrize('queryStr', ['', 'a' * 1001])
    def testInvalidSearch(queryStr, userWoody, ctx):
        with pytest.raises(InputError):
>           search(userWoody.token, queryStr, ctx)

httpTests/otherTests/test_search.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.39258397259080335', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/otherTests/test_search.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________________ testSuccessfulUsersAll ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8236118975444264', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.26036476576564627', handleStr='')
ctx = None

    def testSuccessfulUsersAll(userWoody, userBuzz, ctx):
>       users = usersAll(userWoody.token, ctx)['users']

httpTests/otherTests/test_users_all.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:11: in usersAll
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.35039744237398107', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/otherTests/test_users_all.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2449567711167604', handleStr='')
ctx = None

    @iteration3
    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           standupActive(userWoody.token, -1, ctx)

httpTests/standupTests/test_standup_active.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/standup.py:24: in standupActive
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.942414895417456', handleStr='')
ctx = None

    @iteration3
    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           standupSend(userWoody.token, -1, '1', ctx)

httpTests/standupTests/test_standup_send.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/standup.py:37: in standupSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5106908059289095', handleStr='')
ctx = None

    @iteration3
    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           standupStart(userWoody.token, -1, 15, ctx)

httpTests/standupTests/test_standup_start.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/standup.py:11: in standupStart
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
____________________________ testReturnTypeCorrect _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9308536288829969', handleStr='')
ctx = None

    @iteration3
    def testReturnTypeCorrect(userWoody, ctx):
>       stats = userStats(userWoody.token, ctx)

httpTests/statsTests/test_user_stats.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:63: in userStats
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ testChannelsTrackedChannelsCreate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.03476532964826107', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12bc7700>
ctx = None

    @iteration3
    def testChannelsTrackedChannelsCreate(userWoody, channelFactory, ctx):
>       channelFactory(userWoody, 'poop', True)

httpTests/statsTests/test_user_stats.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.03476532964826107', handleStr='')
name = 'poop', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________________ testSmsTrackedSmCreate ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4931502913310444', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12b5b3a0>, ctx = None

    @iteration3
    def testSmsTrackedSmCreate(userWoody, dmFactory, ctx):
>       dmFactory(userWoody, [])

httpTests/statsTests/test_user_stats.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________________ testInvolvementTracked ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4513863495508086', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.7865421606375727', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b5a820>
ctx = None

    @iteration3
    def testInvolvementTracked(userWoody, userZerg, channelFactory, ctx):
>       stats = userStats(userWoody.token, ctx)['userStats']

httpTests/statsTests/test_user_stats.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:63: in userStats
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8979304279387468', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/statsTests/test_user_stats.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________________ testReturnTypeCorrect _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.06263032394880241', handleStr='')
ctx = None

    @iteration3
    def testReturnTypeCorrect(userWoody, ctx):
>       stats = usersStats(userWoody.token, ctx)

httpTests/statsTests/test_users_stats.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:24: in usersStats
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ testChannelsTrackedChannelsCreate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8020496631599225', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12c02e50>
ctx = None

    @iteration3
    def testChannelsTrackedChannelsCreate(userWoody, channelFactory, ctx):
>       channelFactory(userWoody, 'poop', True)

httpTests/statsTests/test_users_stats.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

creator = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8020496631599225', handleStr='')
name = 'poop', isPublic = True

    def makeChannel(creator, name, isPublic):
        Channel = namedtuple('Channel', ['name', 'isPublic', 'channelId', 'ownerMembers', 'allMembers'])
    
>       ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
E       KeyError: 'channelId'

httpTests/fixtures.py:74: KeyError
____________________________ testDmsTrackedDmCreate ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9197098268957615', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12b5ac10>, ctx = None

    @iteration3
    def testDmsTrackedDmCreate(userWoody, dmFactory, ctx):
>       dmFactory(userWoody, [])

httpTests/statsTests/test_users_stats.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____________________________ testUtilizationTracked ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2693705664085606', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.07571263348856805', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fae12b25e50>
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fae12b25dc0>, ctx = None

    @iteration3
    def testUtilizationTracked(userWoody, userZerg, channelFactory, dmFactory, ctx):
>       stats = usersStats(userWoody.token, ctx)['workspaceStats']

httpTests/statsTests/test_users_stats.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:24: in usersStats
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.571823689140255', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/statsTests/test_users_stats.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_____________________________ testUserProfileValid _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6325631294985665', handleStr='')
ctx = None

    def testUserProfileValid(userWoody, ctx):
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']

httpTests/userTests/test_user_profile.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6411017885321189', handleStr='')
ctx = None

    def testInvalidUser(userWoody, ctx):
        with pytest.raises(InputError):
>           userProfile(userWoody.token, -1, ctx)

httpTests/userTests/test_user_profile.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.46438770884294445', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________________________ testSuccessfulEmailChange ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.13759505085936952', handleStr='')
ctx = None

    def testSuccessfulEmailChange(userWoody, ctx):
        newEmail = 'toystory3@pixar.com'
        userProfileSetemail(userWoody.token, newEmail, ctx)
    
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']

httpTests/userTests/test_user_profile_setemail.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_________________________ testCannotChangeToTakenEmail _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.41545298672369024', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.3572785938539842', handleStr='')
ctx = None

    def testCannotChangeToTakenEmail(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, userBuzz.email, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_setemail.py:25: Failed
______________________________ testInvalidEmail[] ______________________________

email = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7353524628227586', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_setemail.py:31: Failed
____________________________ testInvalidEmail[bob] _____________________________

email = 'bob'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4099443628310664', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_setemail.py:31: Failed
___________________________ testInvalidEmail[ab.com] ___________________________

email = 'ab.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7746846763834894', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_setemail.py:31: Failed
_________________________ testInvalidEmail[@gmail.com] _________________________

email = '@gmail.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9943608418936447', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_setemail.py:31: Failed
______________________ testInvalidEmail[ab@ab@gmail.com] _______________________

email = 'ab@ab@gmail.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.31165569605835386', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_setemail.py:31: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8484389076290182', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile_setemail.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
__________________________ testSuccessfulHandleChange __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.12574657369127418', handleStr='')
ctx = None

    def testSuccessfulHandleChange(userWoody, ctx):
        newHandle = 'www'
        userProfileSethandle(userWoody.token, newHandle, ctx)
    
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']

httpTests/userTests/test_user_profile_sethandle.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
________________________ testCannotChangeToTakenHandle _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.23999950496955136', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5649375384087372', handleStr='')
ctx = None

    def testCannotChangeToTakenHandle(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, userBuzz.handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_sethandle.py:25: Failed
_____________________________ testInvalidHandle[] ______________________________

handleStr = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5708858071791398', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
_____________________________ testInvalidHandle[a] _____________________________

handleStr = 'a'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.16509618283011407', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
____________________________ testInvalidHandle[aa] _____________________________

handleStr = 'aa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5891790607456662', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
___________________ testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] ___________________

handleStr = 'aaaaaaaaaaaaaaaaaaaaa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8359959621816748', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
________________________ testInvalidHandle[new handle] _________________________

handleStr = 'new handle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8513879297007341', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
_________________________ testInvalidHandle[newh@ndle] _________________________

handleStr = 'newh@ndle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.09371234106006976', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8141755007176117', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile_sethandle.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________ testUserProfileSetnameValidName ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8287216516750946', handleStr='')
ctx = None

    def testUserProfileSetnameValidName(userWoody, ctx):
        #  woody became japanese with family coming first
>       userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)

httpTests/userTests/test_user_profile_setname.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
______________________________ testInvalidName[-] ______________________________

nameFirst = '', nameLast = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1849006615219675', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____ testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _____

nameFirst = 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM', nameLast = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.774922041723668', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
____ testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] _____

nameFirst = '', nameLast = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.026617757926852503', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_ testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _

nameFirst = 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM'
nameLast = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.42409201530980045', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.48203147256481027', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile_setname.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
___________________________ testReturnFormatCorrect ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5600121732202272', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testReturnFormatCorrect(userWoody, img, ctx):
>       assert userProfileUploadphoto(userWoody.token, img.url, img.xmin, img.ymin, img.xmax, img.ymax, ctx) == {}

httpTests/userTests/test_user_profile_uploadphoto.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
___________________________ testCannotUploadNonJpeg ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6184473533220822', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testCannotUploadNonJpeg(userWoody, img, ctx):
        with pytest.raises(InputError):
>           userProfileUploadphoto(userWoody.token, 'http://www.cse.unsw.edu.au/~richardb/indexFiles/RichardBuckland-200.png', img.xmin, img.ymin, img.xmax, img.ymax, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ testInvalidDimensions[-1000-0-0-0] ______________________

xminDiff = -1000, ymaxDiff = 0, xmaxDiff = 0, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1944468174063516', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(InputError):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise InputError('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ testInvalidDimensions[0--1000-0-0] ______________________

xminDiff = 0, ymaxDiff = 0, xmaxDiff = 0, yminDiff = -1000
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.26074813927312257', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(InputError):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise InputError('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ testInvalidDimensions[0-0--1000-0] ______________________

xminDiff = 0, ymaxDiff = 0, xmaxDiff = -1000, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5489517448277748', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(InputError):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise InputError('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
______________________ testInvalidDimensions[0-0-0--1000] ______________________

xminDiff = 0, ymaxDiff = -1000, xmaxDiff = 0, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.17576132841109082', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(InputError):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise InputError('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________________ testXEndLessThanStartValue __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.46609161382229747', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testXEndLessThanStartValue(userWoody, img, ctx):
        with pytest.raises(InputError):
>           userProfileUploadphoto(userWoody.token, img.url, 60, 0, 30, 30, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
__________________________ testYEndLessThanStartValue __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.48222877125229413', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testYEndLessThanStartValue(userWoody, img, ctx):
        with pytest.raises(InputError):
>           userProfileUploadphoto(userWoody.token, img.url, 0, 60, 30, 30, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
________________________________ testInvalidUrl ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3381342118035442', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testInvalidUrl(userWoody, img, ctx):
        with pytest.raises(InputError):
>           userProfileUploadphoto(userWoody.token, 'http://cgi.cse.unsw.edu.au/~jas/home/pics/jas5.jpg', img.xmin, img.ymin, img.xmax, img.ymax, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:97: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9391773778794859', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testInvalidToken(userWoody, img, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:97: Exception
=============================== warnings summary ===============================
../../../../../../usr/lib/python3/dist-packages/blinker/base.py:93
  /usr/lib/python3/dist-packages/blinker/base.py:93: DeprecationWarning: invalid escape sequence \*
    """Connect *receiver* to signal events sent by *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:161
  /usr/lib/python3/dist-packages/blinker/base.py:161: DeprecationWarning: invalid escape sequence \*
    """Connect the decorated function as a receiver for *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:242
  /usr/lib/python3/dist-packages/blinker/base.py:242: DeprecationWarning: invalid escape sequence \*
    """Emit this signal on behalf of *sender*, passing on \*\*kwargs.

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll
FAILED httpTests/adminTests/test_admin_user_remove.py::testEmailReusable - Ex...
FAILED httpTests/adminTests/test_admin_user_remove.py::testHandleReusable - E...
FAILED httpTests/adminTests/test_admin_user_remove.py::testInvalidUser - Exce...
FAILED httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner
FAILED httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner
FAILED httpTests/adminTests/test_admin_user_remove.py::testInvalidToken - Exc...
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken
FAILED httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions - Excep...
FAILED httpTests/authTests/test_auth_login.py::testUnregisteredUser - Failed:...
FAILED httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword
FAILED httpTests/authTests/test_auth_logout.py::testSuccessfulLogout - Except...
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com]
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] - Fai...
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com]
FAILED httpTests/authTests/test_auth_register.py::testInvalidPassword[12345]
FAILED httpTests/authTests/test_auth_register.py::testInvalidPassword[] - Fai...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] - Fa...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameLast[] - Fai...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateEmail - Failed...
FAILED httpTests/authTests/test_auth_register.py::testRemovedUserName - Excep...
FAILED httpTests/authTests/test_auth_register.py::testSuccessfulRegistration
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith]
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect
FAILED httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere
FAILED httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword
FAILED httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId
FAILED httpTests/channelTests/test_channel_details.py::testInvalidChannelId
FAILED httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid - ...
FAILED httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId
FAILED httpTests/channelTests/test_channel_leave.py::testInvalidChannelId - E...
FAILED httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid
FAILED httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId
FAILED httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room]
FAILED httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room]
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-]
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-]
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels
FAILED httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken
FAILED httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - Except...
FAILED httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple - Exce...
FAILED httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers - Exception:...
FAILED httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid - Exce...
FAILED httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate - Excep...
FAILED httpTests/dmTests/test_dm_create.py::testInvalidToken - Exception: <Re...
FAILED httpTests/dmTests/test_dm_details.py::testInvalidDmId - Exception: <Re...
FAILED httpTests/dmTests/test_dm_leave.py::testInvalidDmId - Exception: <Resp...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - Exception: ...
FAILED httpTests/dmTests/test_dm_list.py::testInvalidatedToken - Exception: <...
FAILED httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid
FAILED httpTests/messageTests/test_message_pin.py::testInvalidMessageId - Exc...
FAILED httpTests/messageTests/test_message_react.py::testInvalidMessageId - E...
FAILED httpTests/messageTests/test_message_send.py::testInvalidChannel - Exce...
FAILED httpTests/messageTests/test_message_senddm.py::testInvalidDm - Excepti...
FAILED httpTests/messageTests/test_message_unpin.py::testInvalidMessageId - E...
FAILED httpTests/messageTests/test_message_unreact.py::testInvalidMessageId
FAILED httpTests/otherTests/test_clear.py::testClearWorks - Exception: <Respo...
FAILED httpTests/otherTests/test_notifications_get.py::testInvalidToken - Exc...
FAILED httpTests/otherTests/test_search.py::testNoMatches - Exception: <Respo...
FAILED httpTests/otherTests/test_search.py::testInvalidSearch[] - Exception: ...
FAILED httpTests/otherTests/test_search.py::testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/otherTests/test_search.py::testInvalidToken - Exception: <Re...
FAILED httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll - Excep...
FAILED httpTests/otherTests/test_users_all.py::testInvalidToken - Exception: ...
FAILED httpTests/standupTests/test_standup_active.py::testInvalidChannelId - ...
FAILED httpTests/standupTests/test_standup_send.py::testInvalidChannelId - Ex...
FAILED httpTests/standupTests/test_standup_start.py::testInvalidChannelId - E...
FAILED httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect - Excep...
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate
FAILED httpTests/statsTests/test_user_stats.py::testSmsTrackedSmCreate - Exce...
FAILED httpTests/statsTests/test_user_stats.py::testInvolvementTracked - Exce...
FAILED httpTests/statsTests/test_user_stats.py::testInvalidToken - Exception:...
FAILED httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect - Exce...
FAILED httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate
FAILED httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate - Exc...
FAILED httpTests/statsTests/test_users_stats.py::testUtilizationTracked - Exc...
FAILED httpTests/statsTests/test_users_stats.py::testInvalidToken - Exception...
FAILED httpTests/userTests/test_user_profile.py::testUserProfileValid - Excep...
FAILED httpTests/userTests/test_user_profile.py::testInvalidUser - Exception:...
FAILED httpTests/userTests/test_user_profile.py::testInvalidToken - Exception...
FAILED httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange
FAILED httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidToken - ...
FAILED httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange
FAILED httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken
FAILED httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[-]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidToken - E...
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken
ERROR httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything
ERROR httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat
ERROR httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel
ERROR httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
ERROR httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember
ERROR httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember
ERROR httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic
ERROR httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId - K...
ERROR httpTests/channelTests/test_channel_addowner.py::testInvalidToken - Key...
ERROR httpTests/channelTests/test_channel_details.py::testMemberSuccessful - ...
ERROR httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful
ERROR httpTests/channelTests/test_channel_details.py::testInvalidToken - KeyE...
ERROR httpTests/channelTests/test_channel_invite.py::testDuplicateInvite - Ke...
ERROR httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner - ...
ERROR httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember
ERROR httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember
ERROR httpTests/channelTests/test_channel_invite.py::testUIdInvalid - KeyErro...
ERROR httpTests/channelTests/test_channel_invite.py::testInvalidatedToken - K...
ERROR httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic
ERROR httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate
ERROR httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic
ERROR httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate
ERROR httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel
ERROR httpTests/channelTests/test_channel_join.py::testInvalidatedToken - Key...
ERROR httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully
ERROR httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember
ERROR httpTests/channelTests/test_channel_leave.py::testInvalidToken - KeyErr...
ERROR httpTests/channelTests/test_channel_messages.py::testMessageTimestamp
ERROR httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent
ERROR httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
ERROR httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected
ERROR httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected
ERROR httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum
ERROR httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember
ERROR httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven
ERROR httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testInvalidUId - Ke...
ERROR httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken
ERROR httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist
ERROR httpTests/dmTests/test_dm_details.py::testMemberSuccessful - Exception:...
ERROR httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful - Exce...
ERROR httpTests/dmTests/test_dm_details.py::testInvalidToken - Exception: <Re...
ERROR httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully - Exc...
ERROR httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember - Exceptio...
ERROR httpTests/dmTests/test_dm_leave.py::testInvalidToken - Exception: <Resp...
ERROR httpTests/dmTests/test_dm_list.py::testWhenInOneDm - Exception: <Respon...
ERROR httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm - Exception: <R...
ERROR httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - Exc...
ERROR httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - Exce...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - Exc...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
ERROR httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum
ERROR httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember
ERROR httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven
ERROR httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval - Exceptio...
ERROR httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages - Excep...
ERROR httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm - Excep...
ERROR httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidDmId - Exception: <Resp...
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidToken - Exception: <Res...
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage
ERROR httpTests/messageTests/test_message_edit.py::testInvalidMessageLength
ERROR httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage
ERROR httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit
ERROR httpTests/messageTests/test_message_edit.py::testInvalidToken - KeyErro...
ERROR httpTests/messageTests/test_message_meta.py::testMessageIdsUnique - Exc...
ERROR httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel
ERROR httpTests/messageTests/test_message_pin.py::testCannotPinTwice - KeyErr...
ERROR httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin - ...
ERROR httpTests/messageTests/test_message_pin.py::testDmMemberCantPin - Excep...
ERROR httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm
ERROR httpTests/messageTests/test_message_pin.py::testNonmemberCantPin - KeyE...
ERROR httpTests/messageTests/test_message_pin.py::testInvalidToken - KeyError...
ERROR httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel
ERROR httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage
ERROR httpTests/messageTests/test_message_react.py::testInvalidReactId - KeyE...
ERROR httpTests/messageTests/test_message_react.py::testCantReactTwice - KeyE...
ERROR httpTests/messageTests/test_message_react.py::testNonmemberCannotReact
ERROR httpTests/messageTests/test_message_react.py::testInvalidToken - KeyErr...
ERROR httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage
ERROR httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm
ERROR httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage
ERROR httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage
ERROR httpTests/messageTests/test_message_remove.py::testInvalidToken - KeyEr...
ERROR httpTests/messageTests/test_message_send.py::testValidMessage - KeyErro...
ERROR httpTests/messageTests/test_message_send.py::testNonmemberPost - KeyErr...
ERROR httpTests/messageTests/test_message_send.py::testInvalidMessage[] - Key...
ERROR httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_send.py::testInvalidToken - KeyErro...
ERROR httpTests/messageTests/test_message_senddm.py::testValidMessage - Excep...
ERROR httpTests/messageTests/test_message_senddm.py::testNonmemberPost - Exce...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] - E...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidToken - Excep...
ERROR httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage
ERROR httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent
ERROR httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater
ERROR httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[]
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidChannel - ...
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidToken - Ke...
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testNonmemberCannotSendlater
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testCannotTimeTravelAkaSendMessageInPast
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[]
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidDm - Key...
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidToken - ...
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True]
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False]
ERROR httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm
ERROR httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel
ERROR httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel
ERROR httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm
ERROR httpTests/messageTests/test_message_share.py::testInvalidOgMessageId - ...
ERROR httpTests/messageTests/test_message_share.py::testInvalidMessageLength
ERROR httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId
ERROR httpTests/messageTests/test_message_share.py::testShareToInvalidDmId - ...
ERROR httpTests/messageTests/test_message_share.py::testInvalidToken - KeyErr...
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel
ERROR httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice - Ke...
ERROR httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin
ERROR httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin - E...
ERROR httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm
ERROR httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin - ...
ERROR httpTests/messageTests/test_message_unpin.py::testInvalidToken - KeyErr...
ERROR httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel
ERROR httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage
ERROR httpTests/messageTests/test_message_unreact.py::testInvalidReactId - Ke...
ERROR httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice - ...
ERROR httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact
ERROR httpTests/messageTests/test_message_unreact.py::testInvalidToken - KeyE...
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotInChannel - K...
ERROR httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagSelf - KeyError:...
ERROR httpTests/otherTests/test_notifications_get.py::testMultipleTags - KeyE...
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message]
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
ERROR httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch]
ERROR httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm]
ERROR httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched
ERROR httpTests/otherTests/test_search.py::testSingleMatch - KeyError: 'chann...
ERROR httpTests/otherTests/test_search.py::testCaseInsensitiveMatch - KeyErro...
ERROR httpTests/otherTests/test_search.py::testMultipleMatches - KeyError: 'c...
ERROR httpTests/otherTests/test_search.py::testMultipleChannelsJoined - KeyEr...
ERROR httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels
ERROR httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser
ERROR httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[True]
ERROR httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[False]
ERROR httpTests/standupTests/test_standup_active.py::testActiveStandup - KeyE...
ERROR httpTests/standupTests/test_standup_active.py::testInactiveStandup - Ke...
ERROR httpTests/standupTests/test_standup_active.py::testInvalidToken - KeyEr...
ERROR httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly
ERROR httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut
ERROR httpTests/standupTests/test_standup_send.py::testReturnFormat - KeyErro...
ERROR httpTests/standupTests/test_standup_send.py::testNonMemberCannotStandupSend
ERROR httpTests/standupTests/test_standup_send.py::testSendWhenStandupInactive
ERROR httpTests/standupTests/test_standup_send.py::testInvalidMessageLength
ERROR httpTests/standupTests/test_standup_send.py::testInvalidToken - KeyErro...
ERROR httpTests/standupTests/test_standup_start.py::testStandupStartReturnFormat
ERROR httpTests/standupTests/test_standup_start.py::testStandupNoMessages - K...
ERROR httpTests/standupTests/test_standup_start.py::testReturnsImmediately - ...
ERROR httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse
ERROR httpTests/standupTests/test_standup_start.py::testStandupAffectsOnlyOneChannel
ERROR httpTests/standupTests/test_standup_start.py::testNonmemberCannotStartStandup
ERROR httpTests/standupTests/test_standup_start.py::testCannotStartStandupWhenAlreadyActive
ERROR httpTests/standupTests/test_standup_start.py::testInvalidStandupLength
ERROR httpTests/standupTests/test_standup_start.py::testInvalidToken - KeyErr...
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave
ERROR httpTests/statsTests/test_user_stats.py::testSmsTrackedSmLeave
ERROR httpTests/statsTests/test_user_stats.py::testSmsTrackedSmRemove
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish
ERROR httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove - Exce...
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted - ...
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved
============ 134 failed, 2 passed, 3 warnings, 230 errors in 21.00s ============
