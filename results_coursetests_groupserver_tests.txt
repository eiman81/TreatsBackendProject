============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
metadata: {'Python': '3.9.2', 'Platform': 'Linux-4.19.0-21-amd64-x86_64-with-glibc2.31', 'Packages': {'pytest': '6.2.2', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'jest': '0.3.0', 'hypothesis': '6.1.1', 'timeout': '1.4.2', 'snapshottest': '0.6.0', 'metadata': '2.0.1'}}
rootdir: /import/kamen/3/cs1531/project-automarking/tempstore
plugins: jest-0.3.0, hypothesis-6.1.1, timeout-1.4.2, snapshottest-0.6.0, metadata-2.0.1
collecting ... collected 367 items

httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions FAILED    [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser PASSED      [  5%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword PASSED [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout PASSED     [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] PASSED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] PASSED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail PASSED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName FAILED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration FAILED [  9%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] FAILED [ 11%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner FAILED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner FAILED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId FAILED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId FAILED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken FAILED [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful FAILED [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful FAILED [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId FAILED [ 16%]
httpTests/channelTests/test_channel_details.py::testInvalidToken FAILED  [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner FAILED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember FAILED [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember FAILED [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid PASSED     [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic FAILED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate FAILED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic FAILED [ 19%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate FAILED [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId FAILED [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully FAILED [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember FAILED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId FAILED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken FAILED    [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent FAILED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected FAILED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected FAILED [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven PASSED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner FAILED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner FAILED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner FAILED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner FAILED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner FAILED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId FAILED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId FAILED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken FAILED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] FAILED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] FAILED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel FAILED [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken FAILED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist PASSED [ 32%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken FAILED [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation FAILED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple FAILED   [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers FAILED         [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid FAILED   [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate FAILED    [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken FAILED             [ 34%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful ERROR         [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful ERROR   [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId FAILED             [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken ERROR             [ 35%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully ERROR  [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember ERROR       [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId FAILED               [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken ERROR               [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms FAILED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm ERROR                 [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms FAILED          [ 37%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm ERROR            [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken FAILED           [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent ERROR  [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent ERROR   [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected ERROR  [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember ERROR [ 39%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid FAILED [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven ERROR [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval ERROR       [ 40%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm ERROR    [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm ERROR [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId ERROR               [ 41%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken ERROR              [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel FAILED [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage FAILED [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength FAILED [ 42%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage FAILED [ 43%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit FAILED [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken FAILED     [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique ERROR  [ 43%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage FAILED [ 49%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage FAILED [ 49%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage FAILED [ 49%]
httpTests/messageTests/test_message_remove.py::testInvalidToken FAILED   [ 50%]
httpTests/messageTests/test_message_send.py::testValidMessage FAILED     [ 50%]
httpTests/messageTests/test_message_send.py::testNonmemberPost FAILED    [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidChannel FAILED   [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] FAILED [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] FAILED [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidToken FAILED     [ 51%]
httpTests/messageTests/test_message_senddm.py::testValidMessage ERROR    [ 52%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost ERROR   [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm FAILED      [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] ERROR [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken ERROR    [ 53%]
httpTests/otherTests/test_clear.py::testClearWorks FAILED                [ 66%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll FAILED    [ 74%]
httpTests/otherTests/test_users_all.py::testInvalidToken FAILED          [ 75%]
httpTests/userTests/test_user_profile.py::testUserProfileValid FAILED    [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser PASSED         [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken PASSED        [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] FAILED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] FAILED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] FAILED [ 97%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken FAILED [ 97%]

====== Marks recorded: 22.82 ======


==================================== ERRORS ====================================
____________________ ERROR at setup of testMemberSuccessful ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3ce96790>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4994370971184452', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.1493931639527819', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cecd160>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1878622071566074', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.30815200171873935', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3ceb0ca0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9705005107471132', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8687633023081234', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________ ERROR at setup of testMemberLeaveDmSuccessfully ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cdf6af0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7898647692663712', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.00319732190535027', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________ ERROR at setup of testLeaveDmWhenNotMember __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cdeb5e0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.5568637852305451', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.8840950589945711', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cdfbee0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.11728966232648519', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.03918064746403482', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ ERROR at setup of testWhenInOneDm _______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cdcf4c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8075292619279846', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7062049897133247', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________________ ERROR at setup of testListAfterLeaveDm ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cee2d30>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.15090663420936457', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.6434505038175664', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cec1670>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9482588991843868', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.422635612314062', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cf01c10>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8704477847298153', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7266303342191316', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________ ERROR at setup of testRemovalByEditReflected _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3ce87e50>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9781368517847675', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.08889083128260844', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3ce771f0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.16150877158807675', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5941063945909637', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________ ERROR at setup of testInputErrorWhenStartGreaterThanMessageNum ________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cef03a0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.44017824617939816', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.3373713190182879', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________ ERROR at setup of testAccessErrorWhenUserIsNonMember _____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cecdca0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.2129269497265076', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.1878784833895042', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________ ERROR at setup of testAccessErrorWhenInvalidTokenGiven ____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cda4ee0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6783726970405506', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.22746535019408554', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________ ERROR at setup of testSuccessfulDmRemoval ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd86160>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6162574339281957', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.4070367588646704', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________ ERROR at setup of testNonownerCannotRemoveDm _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd86c10>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.2571509901731004', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.9514436751508795', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________ ERROR at setup of testOwnerNonmemberCannotRemoveDm ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd7baf0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6330301837504682', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.058785668032239835', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ ERROR at setup of testInvalidDmId _______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd92940>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7941650628579828', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8827208456267022', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd7d790>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7954829787254889', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.17569649529352627', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________ ERROR at setup of testOriginalPosterCanEditMessageDm _____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd20a60>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.939144026068305', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.6524508730001521', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________ ERROR at setup of testGlobalOwnerCantEditMembersMessageDm ___________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd3bd30>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.023201147616678908', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.968392089249589', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________________ ERROR at setup of testMessageIdsUnique ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd093a0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2812960536026088', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.7981981399237306', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________ ERROR at setup of testGlobalOwnerCantRemoveMembersMessageDm __________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cd10dc0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.8310382344708764', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.3769163952886041', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ ERROR at setup of testValidMessage ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3ccbbf70>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4004463549902939', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.13820622848351927', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________ ERROR at setup of testNonmemberPost ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3ccb0ee0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.7948073540274085', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.009834344469810352', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________________ ERROR at setup of testInvalidMessage[] ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cc998b0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4736270776429239', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.28647991255088345', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cc8c700>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5971222709417381', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.3262146124781957', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cc85550>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1290079254413301', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5732606501649709', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
=================================== FAILURES ===================================
____________________________ testCanHaveTwoSessions ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.800565404791932', handleStr='')
ctx = None

    @pytest.mark.overrideMarks(2)
    def testCanHaveTwoSessions(userWoody, ctx):
        session2 = authLogin(userWoody.email, userWoody.password, ctx)
    
        # succeeds
>       assert userProfile(session2['token'], userWoody.uId, ctx) == userProfile(userWoody.token, userWoody.uId, ctx)

httpTests/authTests/test_auth_login.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:80: InputError
_____________________________ testRemovedUserName ______________________________

ctx = None

    def testRemovedUserName(ctx):
        session = authRegister('abc@gmail.com', 'password1', 'Removed', 'user', ctx)
>       profile = userProfile(session['token'], session['authUserId'], ctx)['user']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:55: KeyError
__________________________ testSuccessfulRegistration __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5969274050106208', handleStr='')
ctx = None

    def testSuccessfulRegistration(userWoody, ctx):
>       woodyProf = userProfile(userWoody.token, userWoody.uId, ctx)['user']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:62: KeyError
____________ testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] _____________

nameFirst = 'Bob', nameLast = 'Smith', expectedHandle = 'bobsmith', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:78: KeyError
_ testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] _

nameFirst = 'ababababab', nameLast = 'cdcdcdcdcdcd'
expectedHandle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:78: KeyError
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

first1 = 'abcdefghij', last1 = 'klmnopqrs', handle1 = 'abcdefghijklmnopqrs'
first2 = 'abcdefghij', last2 = 'klmnopqrs', handle2 = 'abcdefghijklmnopqrs0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1592986642024139', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

first1 = 'abcdefghij', last1 = 'klmnopqrst', handle1 = 'abcdefghijklmnopqrst'
first2 = 'abcdefghij', last2 = 'klmnopqrst', handle2 = 'abcdefghijklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6211960088620825', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
_ testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5401785784349429', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
___ testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ___

first1 = 'abc', last1 = 'def0', handle1 = 'abcdef0', first2 = 'abc'
last2 = 'def', handle2 = 'abcdef1'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.47297747070336604', handleStr='')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       KeyError: 'user'

httpTests/authTests/test_auth_register.py:96: KeyError
____________________ testChannelOwnerCanAddownerWhenMember _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.17672375285534936', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.358998787291098', handleStr='')
ctx = None

    def testChannelOwnerCanAddownerWhenMember(userWoody, woodysPublicToybox, userBuzz, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_addowner.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
_______________________ testGlobalOwnerMemberCanAddowner _______________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.3040110147722832', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1005], allMembers=[])
ctx = None

    def testGlobalOwnerMemberCanAddowner(userBuzz, woodysPublicToybox, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_addowner.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
__________________ testChannelOwnerCantAddownerWhenNonMember ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.34448772986169107', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.14249240582519662', handleStr='')
ctx = None

    def testChannelOwnerCantAddownerWhenNonMember(userWoody, woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(InputError):
>           channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________________ testNonMemberCannotAddOwner __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9659218271772383', handleStr='')
ctx = None

    def testNonMemberCannotAddOwner(woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________ testGlobalOwnerNonMemberCantAddownerPrivate __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7163521060807896', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1000, ownerMembers=[-1005], allMembers=[])
ctx = None

    def testGlobalOwnerNonMemberCantAddownerPrivate(userWoody, zergsPrivateLair, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userWoody.token, zergsPrivateLair.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________ testGlobalOwnerNonMemberCantAddownerPublic __________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.0070819660267886775', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1005], allMembers=[])
ctx = None

    def testGlobalOwnerNonMemberCantAddownerPublic(userBuzz, woodysPublicToybox, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
___________________________ testMemberCannotAddOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.05924366008998616', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9435090008549867', handleStr='')
ctx = None

    def testMemberCannotAddOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_addowner.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
___________________ testCannotAddownerPrexistingChannelOwner ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6325213160886007', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testCannotAddownerPrexistingChannelOwner(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(InputError):
>           channelAddowner(userWoody.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________________ testWithInvalidUId ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18840841966178457', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testWithInvalidUId(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(InputError):
>           channelAddowner(userWoody.token, woodysPublicToybox.channelId, -1, ctx)

httpTests/channelTests/test_channel_addowner.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
___________________________ testWithInvalidChannelId ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4168313720190284', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8960838019473774', handleStr='')
ctx = None

    def testWithInvalidChannelId(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           channelAddowner(userWoody.token, -1, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9065645224255943', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.2507708432451754', handleStr='')
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testMemberSuccessful _____________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.06940421177243028', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.7505881273252597', handleStr='')
ctx = None

    def testMemberSuccessful(woodysPublicToybox, userWoody, userBuzz, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_details.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
__________________________ testNonMemberNotSuccessful __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.7153561042014187', handleStr='')
ctx = None

    def testNonMemberNotSuccessful(woodysPublicToybox, userZerg, ctx):
        with pytest.raises(AccessError):
>           channelDetails(userZerg.token, woodysPublicToybox.channelId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_details.py:35: Failed
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.38620809593118066', handleStr='')
ctx = None

    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           channelDetails(userWoody.token, -1, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_details.py:40: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.834460258658976', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelDetails(userWoody.token, woodysPublicToybox.channelId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channelTests/test_channel_details.py:46: Failed
____________________________ testInviteGlobalOwner _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.2508582457941073', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1005, token='0.5295522189109818', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1000, ownerMembers=[-1005], allMembers=[])
ctx = None

    def testInviteGlobalOwner(userWoody, userZerg, zergsPrivateLair, ctx):
        channelInvite(userZerg.token, zergsPrivateLair.channelId, userWoody.uId, ctx)
    
        chDeets = channelDetails(userWoody.token, zergsPrivateLair.channelId, ctx)
    
>       assert userWoody.uId in [k['uId'] for k in chDeets['allMembers']]
E       KeyError: 'allMembers'

httpTests/channelTests/test_channel_invite.py:27: KeyError
____________________________ testInviteGlobalMember ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.12238476843865898', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5899400784441882', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testInviteGlobalMember(userWoody, userBuzz, woodysPublicToybox, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        chDeets = channelDetails(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       assert userBuzz.uId in [k['uId'] for k in chDeets['allMembers']]
E       KeyError: 'allMembers'

httpTests/channelTests/test_channel_invite.py:36: KeyError
______________________ testInvitationFromNonChannelMember ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6277405322467209', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.1272989169940053', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1000, ownerMembers=[-1010], allMembers=[])
ctx = None

    def testInvitationFromNonChannelMember(userWoody, userBuzz, zergsPrivateLair, ctx):
        with pytest.raises(AccessError):
>           channelInvite(userWoody.token, zergsPrivateLair.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_invite.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:12: in channelInvite
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
_______________________ testGlobalOwnerJoinChannelPublic _______________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.8003680386253935', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1005], allMembers=[])
ctx = None

    def testGlobalOwnerJoinChannelPublic(userBuzz, woodysPublicToybox, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_join.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
______________________ testGlobalOwnerJoinChannelPrivate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7434519131114523', handleStr='')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1000, ownerMembers=[-1005], allMembers=[])
ctx = None

    def testGlobalOwnerJoinChannelPrivate(userWoody, zergsPrivateLair, ctx):
>       channelJoin(userWoody.token, zergsPrivateLair.channelId, ctx)

httpTests/channelTests/test_channel_join.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
__________________________ testGlobalMemberJoinPublic __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.04380051733623236', handleStr='')
ctx = None

    def testGlobalMemberJoinPublic(woodysPublicToybox, userBuzz, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_join.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
_______________________ testGlobalMemberCantJoinPrivate ________________________

zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.030444163968708082', handleStr='')
ctx = None

    def testGlobalMemberCantJoinPrivate(zergsPrivateLair, userBuzz, ctx):
        with pytest.raises(AccessError):
>           channelJoin(userBuzz.token, zergsPrivateLair.channelId, ctx)

httpTests/channelTests/test_channel_join.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
___________________________ testJoinInvalidChannelId ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.33101301701420227', handleStr='')
ctx = None

    def testJoinInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           channelJoin(userWoody.token, -1, ctx)

httpTests/channelTests/test_channel_join.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
______________________ testMemberLeaveChannelSuccessfully ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.742693511510832', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testMemberLeaveChannelSuccessfully(userWoody, woodysPublicToybox, ctx):
>       channelLeave(userWoody.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_leave.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:45: in channelLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________ testLeaveChannelWhenNotMember _________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.6703696706133093', handleStr='')
ctx = None

    def testLeaveChannelWhenNotMember(woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(AccessError):
>           channelLeave(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_leave.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:45: in channelLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.689278058512151', handleStr='')
ctx = None

    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(InputError):
>           channelLeave(userWoody.token, -1, ctx)

httpTests/channelTests/test_channel_leave.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:45: in channelLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7490667869188068', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelLeave(userWoody.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_leave.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:45: in channelLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testMessageTimestamp _____________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.003454930767890607', handleStr='')
ctx = None

    def testMessageTimestamp(woodysPublicToybox, userWoody, ctx):
        expectedTime = utcNow()
>       messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)

httpTests/channelTests/test_channel_messages.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________________ testUnderFiftyMessagesSent __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7012161075290553', handleStr='')
ctx = None

    def testUnderFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
>       messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(10)
        ]

httpTests/channelTests/test_channel_messages.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/channelTests/test_channel_messages.py:24: in <listcomp>
    messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________________ testOverFiftyMessagesSent ___________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.13513667228200688', handleStr='')
ctx = None

    def testOverFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
>       messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]

httpTests/channelTests/test_channel_messages.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/channelTests/test_channel_messages.py:37: in <listcomp>
    messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________________ testRemovalByEditReflected __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.510629305445758', handleStr='')
ctx = None

    def testRemovalByEditReflected(woodysPublicToybox, userWoody, ctx):
>       msg = messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy maybe?', ctx)['messageId']

httpTests/channelTests/test_channel_messages.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________ testRemovalByDeletionReflected ________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5114690227478138', handleStr='')
ctx = None

    def testRemovalByDeletionReflected(woodysPublicToybox, userWoody, ctx):
>       msg = messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy maybe?', ctx)['messageId']

httpTests/channelTests/test_channel_messages.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
___________________________ testOwnerCanRemoveOwner ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.22632764326271593', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.31636860979263526', handleStr='')
ctx = None

    def testOwnerCanRemoveOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
>       channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ testGlobalOwnerMmberCanRemoveOwner ______________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.9474558362295573', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.6730912990134972', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1005], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.0983548499319149', handleStr='')
ctx = None

    def testGlobalOwnerMmberCanRemoveOwner(userZerg, userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userZerg.uId, ctx)
    
>       channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________ testGlobalOwnerNonmemberCannotRemoveOwner ___________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.5630442077555131', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.586111202379956', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1005], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1010, token='0.19422891343168058', handleStr='')
ctx = None

    def testGlobalOwnerNonmemberCannotRemoveOwner(userZerg, userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
>       channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:67: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________ testNonmemberCannotRemoveOwner ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5559654430836489', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.41231701821192424', handleStr='')
ctx = None

    def testNonmemberCannotRemoveOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(AccessError):
>           channelRemoveowner(userBuzz.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________________ testMmberCannotRemoveOwner __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8742053769924814', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.04379078627235122', handleStr='')
ctx = None

    def testMmberCannotRemoveOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_removeowner.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
__________________________ testCannotRemoveLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5982747440408638', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testCannotRemoveLastOwner(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(InputError):
>           channelRemoveowner(userWoody.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________ testGlobalOwnerCannotRemoveOnlyOwner _____________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.3816318454619332', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.7749043996341904', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1005], allMembers=[])
ctx = None

    def testGlobalOwnerCannotRemoveOnlyOwner(userBuzz, userWoody, woodysPublicToybox, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channelTests/test_channel_removeowner.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
___________________________ testCannotRemoveNonOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8320228397744573', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.07745516360458193', handleStr='')
ctx = None

    def testCannotRemoveNonOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(InputError):
>           channelRemoveowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________________ testInvalidUId ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7876936265042886', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testInvalidUId(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(InputError):
>           channelRemoveowner(userWoody.token, woodysPublicToybox.channelId, -1, ctx)

httpTests/channelTests/test_channel_removeowner.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
___________________________ testWithInvalidChannelId ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.16887592584190925', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.19704864217157403', handleStr='')
ctx = None

    def testWithInvalidChannelId(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           channelRemoveowner(userWoody.token, -1, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6925541944829356', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.862408086651129', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, woodysPublicToybox, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelRemoveowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:78: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ testCreateChannel[True-andys room] ______________________

name = 'andys room', isPublic = True
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.4308993833886283', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.06558962271725921', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testCreateChannel(name, isPublic, userZerg, userWoody, ctx):
        chId = channelsCreate(userZerg.token, name, isPublic, ctx)['channelId']
        deets = channelDetails(userZerg.token, chId, ctx)
    
>       assert deets['name'] == name
E       KeyError: 'name'

httpTests/channels_tests/test_channels_create.py:21: KeyError
_____________________ testCreateChannel[False-andys room] ______________________

name = 'andys room', isPublic = False
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=-1000, token='0.6312604989495989', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1005, token='0.7755787930732265', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testCreateChannel(name, isPublic, userZerg, userWoody, ctx):
        chId = channelsCreate(userZerg.token, name, isPublic, ctx)['channelId']
        deets = channelDetails(userZerg.token, chId, ctx)
    
>       assert deets['name'] == name
E       KeyError: 'name'

httpTests/channels_tests/test_channels_create.py:21: KeyError
__________________________ testListAfterLeaveChannel ___________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7087492475736172', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8114129494676403', handleStr='')
ctx = None

    def testListAfterLeaveChannel(woodysPublicToybox, userWoody, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
>       channelLeave(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/channels_tests/test_channels_list.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:45: in channelLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9161369280475005', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelsList(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_list.py:53: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.007838828075054982', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           channelsListall(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.InputError'>

httpTests/channels_tests/test_channels_listall.py:44: Failed
___________________________ testSuccessfulDmCreation ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.46287004285785827', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.2499941939035728', handleStr='')
ctx = None

    def testSuccessfulDmCreation(userWoody, userBuzz, ctx):
>       aDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)

httpTests/dmTests/test_dm_create.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________________ testDmNameCreationMultiple __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.04318788766841242', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.13134683176424922', handleStr='')
ctx = None

    def testDmNameCreationMultiple(userWoody, userBuzz, ctx):
>       theDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)

httpTests/dmTests/test_dm_create.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testDmToInvalidUsers _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.029134056481664228', handleStr='')
ctx = None

    def testDmToInvalidUsers(userWoody, ctx):
        with pytest.raises(InputError):
>           dmCreate(userWoody.token, [userWoody.uId + 1531, userWoody.uId + 6080, userWoody.uId + 6771], ctx)

httpTests/dmTests/test_dm_create.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________________ testDmToUsersButOneInvalid __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6600663131406328', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.8385496703634228', handleStr='')
ctx = None

    def testDmToUsersButOneInvalid(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           dmCreate(userWoody.token, [userBuzz.uId, -1], ctx)

httpTests/dmTests/test_dm_create.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________________ testDmToUsersButDuplicate ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.25474217506391406', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5695310860491627', handleStr='')
ctx = None

    def testDmToUsersButDuplicate(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           dmCreate(userWoody.token, [userBuzz.uId, userBuzz.uId], ctx)

httpTests/dmTests/test_dm_create.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9114358693654363', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           dmCreate(userWoody.token, [], ctx)

httpTests/dmTests/test_dm_create.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidDmId ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9361206969789759', handleStr='')
ctx = None

    def testInvalidDmId(userWoody, ctx):
        with pytest.raises(InputError):
>           dmDetails(userWoody.token, -1, ctx)

httpTests/dmTests/test_dm_details.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:13: in dmDetails
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidDmId ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.0146216672813273', handleStr='')
ctx = None

    def testInvalidDmId(userWoody, ctx):
        with pytest.raises(InputError):
>           dmLeave(userWoody.token, -1, ctx)

httpTests/dmTests/test_dm_leave.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:57: in dmLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testWhenInNoDms ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6639449288946839', handleStr='')
ctx = None

    def testWhenInNoDms(userWoody, ctx):
>       assert dmList(userWoody.token, ctx)['dms'] == []

httpTests/dmTests/test_dm_list.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:24: in dmList
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________________________ testWhenInMultipleDms _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.10666637180410032', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fea3cda4310>, ctx = None

    def testWhenInMultipleDms(userWoody, dmFactory, ctx):
>       dm_1 = dmFactory(userWoody, [])

httpTests/dmTests/test_dm_list.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:118: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:35: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8923501253188058', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           dmList(userWoody.token, ctx)

httpTests/dmTests/test_dm_list.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:24: in dmList
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________ testInputErrorWhenDmIdInvalid _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.24838183007143666', handleStr='')
ctx = None

    def testInputErrorWhenDmIdInvalid(userWoody, ctx):
        with pytest.raises(InputError):
>           dmMessages(userWoody.token, -1, 0, ctx)

httpTests/dmTests/test_dm_messages.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:68: in dmMessages
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
___________________ testOriginalPosterCanEditMessageChannel ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7950518340044268', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3cd2aa60>
ctx = None

    def testOriginalPosterCanEditMessageChannel(userWoody, woodysPublicToybox, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodysPublicToybox)

httpTests/messageTests/test_message_edit.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:106: in makeMessage
    msgId = message.messageSend(poster.token, location.channelId, content, ctx)['messageId']
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________________ testEmptyEditDeletesMessage __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8010467584410221', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3cd4ba60>
ctx = None

    def testEmptyEditDeletesMessage(userWoody, woodysPublicToybox, messageFactory, ctx):
>       woodysMsg = messageFactory(userWoody, woodysPublicToybox)

httpTests/messageTests/test_message_edit.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:106: in makeMessage
    msgId = message.messageSend(poster.token, location.channelId, content, ctx)['messageId']
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
___________________________ testInvalidMessageLength ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.06838963617425353', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3cd09a60>
ctx = None

    def testInvalidMessageLength(userWoody, woodysPublicToybox, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodysPublicToybox, 'hi')

httpTests/messageTests/test_message_edit.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:106: in makeMessage
    msgId = message.messageSend(poster.token, location.channelId, content, ctx)['messageId']
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________________ testCannotEditDeletedMessage _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.37575539789658996', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3cd10a60>
ctx = None

    def testCannotEditDeletedMessage(userWoody, woodysPublicToybox, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodysPublicToybox, 'hi')

httpTests/messageTests/test_message_edit.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:106: in makeMessage
    msgId = message.messageSend(poster.token, location.channelId, content, ctx)['messageId']
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________ testNonownerNonposterCantEdit _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9704242394618283', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.6242268120715866', handleStr='')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3cd09550>
ctx = None

    def testNonownerNonposterCantEdit(userWoody, woodysPublicToybox, userBuzz, messageFactory, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/messageTests/test_message_edit.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5179074868597919', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3ccdbc10>
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodysPublicToybox)

httpTests/messageTests/test_message_edit.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:106: in makeMessage
    msgId = message.messageSend(poster.token, location.channelId, content, ctx)['messageId']
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ testOriginalPosterCanRemoveMessage ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.31105033074357347', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3ccbb5e0>
ctx = None

    def testOriginalPosterCanRemoveMessage(userWoody, woodysPublicToybox, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodysPublicToybox)

httpTests/messageTests/test_message_remove.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:106: in makeMessage
    msgId = message.messageSend(poster.token, location.channelId, content, ctx)['messageId']
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________ testCannotRemoveDeletedMessage ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.17808015334150662', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3cd3bca0>
ctx = None

    def testCannotRemoveDeletedMessage(userWoody, woodysPublicToybox, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodysPublicToybox, 'hi')

httpTests/messageTests/test_message_remove.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:106: in makeMessage
    msgId = message.messageSend(poster.token, location.channelId, content, ctx)['messageId']
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________________ testNonownerNonposterCantRemoveMessage ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1562256658623502', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.6406210258564249', handleStr='')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3cd2a3a0>
ctx = None

    def testNonownerNonposterCantRemoveMessage(userWoody, woodysPublicToybox, userBuzz, messageFactory, ctx):
>       channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)

httpTests/messageTests/test_message_remove.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:56: in channelJoin
    return util.parseResponse(
httpTests/fakepi/util.py:77: in parseResponse
    data = json.loads(res.text)
/usr/lib/python3.9/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.9/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7fea3fffa820>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.9/json/decoder.py:355: JSONDecodeError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.4056006538829209', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fea3cdeb040>
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
>       aMsg = messageFactory(userWoody, woodysPublicToybox)

httpTests/messageTests/test_message_remove.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:106: in makeMessage
    msgId = message.messageSend(poster.token, location.channelId, content, ctx)['messageId']
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testValidMessage _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.37773092305059075', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testValidMessage(userWoody, woodysPublicToybox, ctx):
        msgText = 'hello, world'
>       msg = messageSend(userWoody.token, woodysPublicToybox.channelId, msgText, ctx)

httpTests/messageTests/test_message_send.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________________ testNonmemberPost _______________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.6112400570581502', handleStr='')
ctx = None

    def testNonmemberPost(woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(AccessError):
>           messageSend(userBuzz.token, woodysPublicToybox.channelId, 'hi', ctx)

httpTests/messageTests/test_message_send.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________________ testInvalidChannel ______________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.6107060645832671', handleStr='')
ctx = None

    def testInvalidChannel(userBuzz, ctx):
        with pytest.raises(InputError):
>           messageSend(userBuzz.token, -1, 'Hello world', ctx)

httpTests/messageTests/test_message_send.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testInvalidMessage[] _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.053114420599583045', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
message = '', ctx = None

    @pytest.mark.parametrize('message', ['', 'm' * 1001])
    def testInvalidMessage(userWoody, woodysPublicToybox, message, ctx):
        with pytest.raises(InputError):
>           messageSend(userWoody.token, woodysPublicToybox.channelId, message, ctx)

httpTests/messageTests/test_message_send.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_ testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.515250929705696', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
message = 'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm...mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm'
ctx = None

    @pytest.mark.parametrize('message', ['', 'm' * 1001])
    def testInvalidMessage(userWoody, woodysPublicToybox, message, ctx):
        with pytest.raises(InputError):
>           messageSend(userWoody.token, woodysPublicToybox.channelId, message, ctx)

httpTests/messageTests/test_message_send.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6029507015576387', handleStr='')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=1000, ownerMembers=[-1000], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           messageSend(userWoody.token, woodysPublicToybox.channelId, 'AccessError nooooooooo', ctx)

httpTests/messageTests/test_message_send.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________________ testInvalidDm _________________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1000, token='0.6241404219675819', handleStr='')
ctx = None

    def testInvalidDm(userBuzz, ctx):
        with pytest.raises(InputError):
>           messageSenddm(userBuzz.token, -1, 'Hello world', ctx)

httpTests/messageTests/test_message_senddm.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:99: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________________ testClearWorks ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.35705946790399423', handleStr='')
userFactory = <function userFactory.<locals>.makeUser at 0x7fea3cc85f70>
ctx = None

    def testClearWorks(userWoody, userFactory, ctx):
        # an existing user can do something
>       assert usersAll(userWoody.token, ctx) is not None

httpTests/otherTests/test_clear.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:11: in usersAll
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________________________ testSuccessfulUsersAll ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.024670578527784537', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.0026689011541976004', handleStr='')
ctx = None

    def testSuccessfulUsersAll(userWoody, userBuzz, ctx):
>       users = usersAll(userWoody.token, ctx)['users']

httpTests/otherTests/test_users_all.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:11: in usersAll
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3064113001143822', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           usersAll(userWoody.token, ctx)

httpTests/otherTests/test_users_all.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:11: in usersAll
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testUserProfileValid _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9184050139786002', handleStr='')
ctx = None

    def testUserProfileValid(userWoody, ctx):
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']
E       KeyError: 'user'

httpTests/userTests/test_user_profile.py:15: KeyError
__________________________ testSuccessfulEmailChange ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9106499529864602', handleStr='')
ctx = None

    def testSuccessfulEmailChange(userWoody, ctx):
        newEmail = 'toystory3@pixar.com'
>       userProfileSetemail(userWoody.token, newEmail, ctx)

httpTests/userTests/test_user_profile_setemail.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________________ testCannotChangeToTakenEmail _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.015688019886712645', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.5412481313891382', handleStr='')
ctx = None

    def testCannotChangeToTakenEmail(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, userBuzz.email, ctx)

httpTests/userTests/test_user_profile_setemail.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________________ testInvalidEmail[] ______________________________

email = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.02609364517562307', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________________________ testInvalidEmail[bob] _____________________________

email = 'bob'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5056448353399288', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
___________________________ testInvalidEmail[ab.com] ___________________________

email = 'ab.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.17207535161742782', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________________ testInvalidEmail[@gmail.com] _________________________

email = '@gmail.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6130931608189136', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________ testInvalidEmail[ab@ab@gmail.com] _______________________

email = 'ab@ab@gmail.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.5532999324418957', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.410836991144893', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSetemail(userWoody.token, userWoody.email, ctx)

httpTests/userTests/test_user_profile_setemail.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:33: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
__________________________ testSuccessfulHandleChange __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.39290934806248723', handleStr='')
ctx = None

    def testSuccessfulHandleChange(userWoody, ctx):
        newHandle = 'www'
>       userProfileSethandle(userWoody.token, newHandle, ctx)

httpTests/userTests/test_user_profile_sethandle.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________ testCannotChangeToTakenHandle _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6956095395914323', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=-1005, token='0.9446001236064585', handleStr='')
ctx = None

    def testCannotChangeToTakenHandle(userWoody, userBuzz, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, userBuzz.handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testInvalidHandle[] ______________________________

handleStr = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.1679453147743304', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_____________________________ testInvalidHandle[a] _____________________________

handleStr = 'a'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7470100392006869', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____________________________ testInvalidHandle[aa] _____________________________

handleStr = 'aa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3502762077432868', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
___________________ testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] ___________________

handleStr = 'aaaaaaaaaaaaaaaaaaaaa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.20439133922117247', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
________________________ testInvalidHandle[new handle] _________________________

handleStr = 'new handle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.24112168711757254', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_________________________ testInvalidHandle[newh@ndle] _________________________

handleStr = 'newh@ndle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7463576453621141', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.9563085392502326', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSethandle(userWoody.token, userWoody.handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:44: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________ testUserProfileSetnameValidName ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.7097905867069132', handleStr='')
ctx = None

    def testUserProfileSetnameValidName(userWoody, ctx):
        #  woody became japanese with family coming first
>       userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)

httpTests/userTests/test_user_profile_setname.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:22: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
______________________________ testInvalidName[-] ______________________________

nameFirst = '', nameLast = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.8107143114005919', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:22: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____ testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _____

nameFirst = 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM', nameLast = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.18735949219418568', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:22: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
____ testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] _____

nameFirst = '', nameLast = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.013596521238101289', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:22: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_ testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _

nameFirst = 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM'
nameLast = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.6323155822805986', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(InputError):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:22: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=-1000, token='0.3856280744597891', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)

httpTests/userTests/test_user_profile_setname.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:22: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if data == {'error': 'error'}:
                raise error.InputError()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:84: Exception
=============================== warnings summary ===============================
../../../../../../usr/lib/python3/dist-packages/blinker/base.py:93
  /usr/lib/python3/dist-packages/blinker/base.py:93: DeprecationWarning: invalid escape sequence \*
    """Connect *receiver* to signal events sent by *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:161
  /usr/lib/python3/dist-packages/blinker/base.py:161: DeprecationWarning: invalid escape sequence \*
    """Connect the decorated function as a receiver for *sender*.

../../../../../../usr/lib/python3/dist-packages/blinker/base.py:242
  /usr/lib/python3/dist-packages/blinker/base.py:242: DeprecationWarning: invalid escape sequence \*
    """Emit this signal on behalf of *sender*, passing on \*\*kwargs.

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions - httpT...
FAILED httpTests/authTests/test_auth_register.py::testRemovedUserName - KeyEr...
FAILED httpTests/authTests/test_auth_register.py::testSuccessfulRegistration
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith]
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
FAILED httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner
FAILED httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember
FAILED httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic
FAILED httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner
FAILED httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner
FAILED httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId - ...
FAILED httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId
FAILED httpTests/channelTests/test_channel_addowner.py::testInvalidToken - Ex...
FAILED httpTests/channelTests/test_channel_details.py::testMemberSuccessful
FAILED httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful
FAILED httpTests/channelTests/test_channel_details.py::testInvalidChannelId
FAILED httpTests/channelTests/test_channel_details.py::testInvalidToken - Fai...
FAILED httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner
FAILED httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember
FAILED httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember
FAILED httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic
FAILED httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate
FAILED httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic
FAILED httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate
FAILED httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId
FAILED httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully
FAILED httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember
FAILED httpTests/channelTests/test_channel_leave.py::testInvalidChannelId - E...
FAILED httpTests/channelTests/test_channel_leave.py::testInvalidToken - Excep...
FAILED httpTests/channelTests/test_channel_messages.py::testMessageTimestamp
FAILED httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected
FAILED httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected
FAILED httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testInvalidUId - E...
FAILED httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId
FAILED httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room]
FAILED httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room]
FAILED httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel
FAILED httpTests/channels_tests/test_channels_list.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken
FAILED httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - Except...
FAILED httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple - Exce...
FAILED httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers - Exception:...
FAILED httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid - Exce...
FAILED httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate - Excep...
FAILED httpTests/dmTests/test_dm_create.py::testInvalidToken - Exception: <Re...
FAILED httpTests/dmTests/test_dm_details.py::testInvalidDmId - Exception: <Re...
FAILED httpTests/dmTests/test_dm_leave.py::testInvalidDmId - Exception: <Resp...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInNoDms - Exception: <Respo...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - Exception: ...
FAILED httpTests/dmTests/test_dm_list.py::testInvalidatedToken - Exception: <...
FAILED httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid
FAILED httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel
FAILED httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage
FAILED httpTests/messageTests/test_message_edit.py::testInvalidMessageLength
FAILED httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage
FAILED httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit
FAILED httpTests/messageTests/test_message_edit.py::testInvalidToken - Except...
FAILED httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage
FAILED httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage
FAILED httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage
FAILED httpTests/messageTests/test_message_remove.py::testInvalidToken - Exce...
FAILED httpTests/messageTests/test_message_send.py::testValidMessage - Except...
FAILED httpTests/messageTests/test_message_send.py::testNonmemberPost - Excep...
FAILED httpTests/messageTests/test_message_send.py::testInvalidChannel - Exce...
FAILED httpTests/messageTests/test_message_send.py::testInvalidMessage[] - Ex...
FAILED httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
FAILED httpTests/messageTests/test_message_send.py::testInvalidToken - Except...
FAILED httpTests/messageTests/test_message_senddm.py::testInvalidDm - Excepti...
FAILED httpTests/otherTests/test_clear.py::testClearWorks - Exception: <Respo...
FAILED httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll - Excep...
FAILED httpTests/otherTests/test_users_all.py::testInvalidToken - Exception: ...
FAILED httpTests/userTests/test_user_profile.py::testUserProfileValid - KeyEr...
FAILED httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange
FAILED httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidToken - ...
FAILED httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange
FAILED httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken
FAILED httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[-]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidToken - E...
ERROR httpTests/dmTests/test_dm_details.py::testMemberSuccessful - Exception:...
ERROR httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful - Exce...
ERROR httpTests/dmTests/test_dm_details.py::testInvalidToken - Exception: <Re...
ERROR httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully - Exc...
ERROR httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember - Exceptio...
ERROR httpTests/dmTests/test_dm_leave.py::testInvalidToken - Exception: <Resp...
ERROR httpTests/dmTests/test_dm_list.py::testWhenInOneDm - Exception: <Respon...
ERROR httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm - Exception: <R...
ERROR httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - Exc...
ERROR httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - Exce...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - Exc...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
ERROR httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum
ERROR httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember
ERROR httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven
ERROR httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval - Exceptio...
ERROR httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm - Excep...
ERROR httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidDmId - Exception: <Resp...
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidToken - Exception: <Res...
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm
ERROR httpTests/messageTests/test_message_meta.py::testMessageIdsUnique - Exc...
ERROR httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm
ERROR httpTests/messageTests/test_message_senddm.py::testValidMessage - Excep...
ERROR httpTests/messageTests/test_message_senddm.py::testNonmemberPost - Exce...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] - E...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidToken - Excep...
===== 113 failed, 42 passed, 183 skipped, 3 warnings, 29 errors in 10.87s ======
