npm verb cli [
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/node',
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/npm',
npm verb cli   'run',
npm verb cli   'test',
npm verb cli   '--verbose',
npm verb cli   'tests/'
npm verb cli ]
npm info using npm@8.5.0
npm info using node@v16.14.2
npm timing npm:load:whichnode Completed in 0ms
npm timing config:load:defaults Completed in 1ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/lib/node_modules/npm/npmrc Completed in 1ms
npm timing config:load:builtin Completed in 2ms
npm timing config:load:cli Completed in 2ms
npm timing config:load:env Completed in 1ms
npm timing config:load:file:/import/kamen/3/cs1531/project-automarking/tempstore/.npmrc Completed in 0ms
npm timing config:load:project Completed in 11ms
npm timing config:load:file:/import/kamen/3/cs1531/.npmrc Completed in 0ms
npm timing config:load:user Completed in 1ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/etc/npmrc Completed in 0ms
npm timing config:load:global Completed in 0ms
npm timing config:load:validate Completed in 0ms
npm timing config:load:credentials Completed in 2ms
npm timing config:load:setEnvs Completed in 1ms
npm timing config:load Completed in 21ms
npm timing npm:load:configload Completed in 22ms
npm timing npm:load:setTitle Completed in 0ms
npm timing config:load:flatten Completed in 3ms
npm timing npm:load:display Completed in 7ms
npm verb logfile /import/kamen/3/cs1531/.npm/_logs/2022-06-25T00_45_51_340Z-debug-0.log
npm timing npm:load:logFile Completed in 17ms
npm timing npm:load:timers Completed in 0ms
npm timing npm:load:configScope Completed in 0ms
npm timing npm:load Completed in 46ms

> test
> jest "tests/"

FAIL tests/tests/user_tests/userProfile.test.js
  ● Test valid user profile

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 7
    + Received  + 1

      Object {
    -   "user": Object {
    -     "email": "blah@email.com",
    -     "handleStr": "johnsmith",
    -     "nameFirst": "john",
    -     "nameLast": "smith",
    -     "uId": undefined,
    -   },
    +   "error": "error",
      }

      16 |     let uID = authRegisterV1('blah@email.com', 'password1', 'john', 'smith');
      17 |     let res = userProfileV1(authID.authUserId, uID.authUserId);
    > 18 |     expect(res).toStrictEqual({user: {uId: uID.authUserId, email: 'blah@email.com', nameFirst: 'john', nameLast: 'smith', handleStr: 'johnsmith'}});
         |                 ^
      19 | });
      20 |
      21 | /*

      at Object.<anonymous> (tests/tests/user_tests/userProfile.test.js:18:17)

FAIL tests/tests/channels_tests/channelsCreate.test.js
  ● Test create channel successful › Created channel info in channel details

    expect(received).toBe(expected) // Object.is equality

    Expected: "name"
    Received: undefined

      20 |             let chId = channelsCreateV1(uId, channelName, true)['channelId'];
      21 |             let deets = channelDetailsV1(uId, chId);
    > 22 |             expect(deets['name']).toBe(channelName);
         |                                   ^
      23 |             // check in owner and all members lists
      24 |             let owners = deets['ownerMembers'].map(mem => mem['uId']);
      25 |             let allmems = deets['allMembers'].map(mem => mem['uId']);

      at tests/tests/channels_tests/channelsCreate.test.js:22:35

  ● Test create channel successful › Created channel info in channel details

    expect(received).toBe(expected) // Object.is equality

    Expected: "andys room"
    Received: undefined

      20 |             let chId = channelsCreateV1(uId, channelName, true)['channelId'];
      21 |             let deets = channelDetailsV1(uId, chId);
    > 22 |             expect(deets['name']).toBe(channelName);
         |                                   ^
      23 |             // check in owner and all members lists
      24 |             let owners = deets['ownerMembers'].map(mem => mem['uId']);
      25 |             let allmems = deets['allMembers'].map(mem => mem['uId']);

      at tests/tests/channels_tests/channelsCreate.test.js:22:35

FAIL tests/tests/channel_tests/channelDetails.test.js
  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

FAIL tests/tests/channels_tests/channelsList.test.js
  ● Test member in no channels

    expect(received).toStrictEqual(expected) // deep equality

    Expected: []
    Received: undefined

      16 | test('Test member in no channels', () => {
      17 |     let res = channelsListV1(uId)['channels']
    > 18 |     expect(res).toStrictEqual([]);
         |                 ^
      19 | });
      20 |
      21 | describe("Test channel owner in channel", () => {

      at Object.<anonymous> (tests/tests/channels_tests/channelsList.test.js:18:17)

  ● Test channel owner in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      25 |             let chId = channelsCreateV1(uId, 'andy', pub)['channelId'];
      26 |             let deets = {'channelId': chId, 'name': 'andy'};
    > 27 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
         |                                                     ^
      28 |         }
      29 |     );
      30 | });

      at tests/tests/channels_tests/channelsList.test.js:27:53

  ● Test channel owner in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      25 |             let chId = channelsCreateV1(uId, 'andy', pub)['channelId'];
      26 |             let deets = {'channelId': chId, 'name': 'andy'};
    > 27 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
         |                                                     ^
      28 |         }
      29 |     );
      30 | });

      at tests/tests/channels_tests/channelsList.test.js:27:53

  ● Test channel member in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      37 |             channelInviteV1(uId, chId, uIdWoody);
      38 |             let deets = {'channelId': chId, 'name': 'andy'};
    > 39 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
         |                                                     ^
      40 |         }
      41 |     );
      42 | });

      at tests/tests/channels_tests/channelsList.test.js:39:53

  ● Test channel member in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      37 |             channelInviteV1(uId, chId, uIdWoody);
      38 |             let deets = {'channelId': chId, 'name': 'andy'};
    > 39 |             expect(channelsListV1(uId)['channels']).toContainEqual(deets);
         |                                                     ^
      40 |         }
      41 |     );
      42 | });

      at tests/tests/channels_tests/channelsList.test.js:39:53

  ● Test user in multiple channels › Create channel then list details

    TypeError: Cannot read properties of undefined (reading 'sort')

      51 |             let expectedDeets = [{'channelId': chId, 'name': 'andy'}, {'channelId': chId2, 'name': 'ZERG'}];
      52 |             let deets = channelsListV1(uId)['channels'];
    > 53 |             deets.sort((a, b) => (a['channelId']- b['channelId']));
         |                   ^
      54 |             expectedDeets.sort((a, b) => (a['channelId']- b['channelId']));
      55 |             expect(expectedDeets).toStrictEqual(deets);
      56 |         }

      at tests/tests/channels_tests/channelsList.test.js:53:19

  ● Test user in multiple channels › Create channel then list details

    TypeError: Cannot read properties of undefined (reading 'sort')

      51 |             let expectedDeets = [{'channelId': chId, 'name': 'andy'}, {'channelId': chId2, 'name': 'ZERG'}];
      52 |             let deets = channelsListV1(uId)['channels'];
    > 53 |             deets.sort((a, b) => (a['channelId']- b['channelId']));
         |                   ^
      54 |             expectedDeets.sort((a, b) => (a['channelId']- b['channelId']));
      55 |             expect(expectedDeets).toStrictEqual(deets);
      56 |         }

      at tests/tests/channels_tests/channelsList.test.js:53:19

FAIL tests/tests/channel_tests/channelInvite.test.js
  ● Test inviting global owner 1

    TypeError: Cannot read properties of undefined (reading 'map')

      31 |     let channelDetail = channelDetailsV1(uIdBuzz, chIdWoody);
      32 |     // buzz should be in all members, not owners
    > 33 |     let owners = channelDetail['ownerMembers'].map(mem => mem['uId']);
         |                                                ^
      34 |     let allmems = channelDetail['allMembers'].map(mem => mem['uId']);
      35 |     expect(owners).toEqual(expect.not.arrayContaining([uIdBuzz]));
      36 |     expect(allmems).toContain(uIdBuzz);

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:33:48)

  ● Test inviting global owner 2

    TypeError: Cannot read properties of undefined (reading 'map')

      42 |     let channelDetail = channelDetailsV1(uIdWoody, chIdZerg);
      43 |     // buzz should be in all members, not owners
    > 44 |     let owners = channelDetail['ownerMembers'].map(mem => mem['uId']);
         |                                                ^
      45 |     let allmems = channelDetail['allMembers'].map(mem => mem['uId']);
      46 |     expect(owners).toEqual(expect.not.arrayContaining([uIdWoody]));
      47 |     expect(allmems).toContain(uIdWoody);

      at Object.<anonymous> (tests/tests/channel_tests/channelInvite.test.js:44:48)

FAIL tests/tests/channels_tests/channelsListall.test.js
  ● Test when no channels

    expect(received).toStrictEqual(expected) // deep equality

    Expected: []
    Received: undefined

      22 |     clearV1();
      23 |     let res = channelsListallV1(uIdZerg)['channels']
    > 24 |     expect(res).toStrictEqual([]);
         |                 ^
      25 | });
      26 |
      27 | test('Test when one channel exists private', () => {

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:24:17)

  ● Test when one channel exists private

    expect(received).toEqual(expected) // deep equality

    Expected: ArrayContaining [ObjectContaining {"channelId": undefined, "name": "zergs lair"}]
    Received: undefined

      28 |     let res = channelsListallV1(uIdWoody)['channels'];
      29 |     let channelDetail = {'channelId': chIdZerg, 'name': 'zergs lair'}
    > 30 |     expect(res).toEqual(
         |                 ^
      31 |         expect.arrayContaining([
      32 |             expect.objectContaining(channelDetail)
      33 |         ])

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:30:17)

  ● Test when one channel exists public

    expect(received).toEqual(expected) // deep equality

    Expected: ArrayContaining [ObjectContaining {"channelId": undefined, "name": "woodys toybox"}]
    Received: undefined

      38 |     let res = channelsListallV1(uIdZerg)['channels'];
      39 |     let channelDetail = {'channelId': chIdWoody, 'name': 'woodys toybox'}
    > 40 |     expect(res).toEqual(
         |                 ^
      41 |         expect.arrayContaining([
      42 |             expect.objectContaining(channelDetail)
      43 |         ])

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:40:17)

  ● Test when multiple channels exist

    TypeError: Cannot read properties of undefined (reading 'sort')

      52 |     let res = channelsListallV1(uIdBuzz)['channels'];
      53 |     // sort according to channelId values
    > 54 |     res.sort((a, b) => (a['channelId']- b['channelId']));
         |         ^
      55 |     expectedChannels.sort((a, b) => (a['channelId']- b['channelId']));
      56 |     expect(res).toStrictEqual(expectedChannels);
      57 | });

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:54:9)

FAIL tests/tests/channel_tests/channelJoin.test.js
  ● Test global owner can join private channel

    TypeError: Cannot read properties of undefined (reading 'map')

      22 |     channelJoinV1(uIdWoody, chIdZerg);
      23 |     let chDeets = channelDetailsV1(uIdWoody, chIdZerg);
    > 24 |     let owners = chDeets['ownerMembers'].map(mem => mem['uId']);
         |                                          ^
      25 |     let allmems = chDeets['allMembers'].map(mem => mem['uId']);
      26 |     expect(owners).toEqual(expect.not.arrayContaining([uIdWoody]));
      27 |     expect(allmems).toContain(uIdWoody);

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:24:42)

  ● Test global owner can join public channel

    TypeError: Cannot read properties of undefined (reading 'map')

      31 |     channelJoinV1(uIdBuzz, chIdWoody);
      32 |     let chDeets = channelDetailsV1(uIdBuzz, chIdWoody);
    > 33 |     let owners = chDeets['ownerMembers'].map(mem => mem['uId']);
         |                                          ^
      34 |     let allmems = chDeets['allMembers'].map(mem => mem['uId']);
      35 |     expect(owners).toEqual(expect.not.arrayContaining([uIdBuzz]));
      36 |     expect(allmems).toContain(uIdBuzz);

      at Object.<anonymous> (tests/tests/channel_tests/channelJoin.test.js:33:42)

PASS tests/tests/auth_tests/authLogin.test.js
PASS tests/tests/other_tests/clear.test.js
FAIL tests/tests/channel_tests/channelMessages.test.js
  ● Test error when start greater than message num

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 3

      Object {
    -   "error": "error",
    +   "end": -1,
    +   "messages": Array [],
    +   "start": 0,
      }

      29 | test('Test error when start greater than message num', () => {
      30 |     let res = channelMessagesV1(uIdWoody, chIdWoody, 21389429);
    > 31 |     expect(res).toStrictEqual({error: 'error'});
         |                 ^
      32 | });
      33 |
      34 | test('Test messages from non channel member', () => {

      at Object.<anonymous> (tests/tests/channel_tests/channelMessages.test.js:31:17)

  ● Test messages from non channel member

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 3

      Object {
    -   "error": "error",
    +   "end": -1,
    +   "messages": Array [],
    +   "start": 0,
      }

      34 | test('Test messages from non channel member', () => {
      35 |     let res = channelMessagesV1(uIdZerg, chIdWoody, 0);
    > 36 |     expect(res).toStrictEqual({error: 'error'});
         |                 ^
      37 | });
      38 |
      39 | test('Test channel id invalid', () => {

      at Object.<anonymous> (tests/tests/channel_tests/channelMessages.test.js:36:17)

  ● Test channel id invalid

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 3

      Object {
    -   "error": "error",
    +   "end": -1,
    +   "messages": Array [],
    +   "start": 0,
      }

      39 | test('Test channel id invalid', () => {
      40 |     let res = channelMessagesV1(uIdWoody, -1, 0);
    > 41 |     expect(res).toStrictEqual({error: 'error'});
         |                 ^
      42 | });
      43 |
      44 | /*

      at Object.<anonymous> (tests/tests/channel_tests/channelMessages.test.js:41:17)

FAIL tests/tests/auth_tests/authRegister.test.js
  ● Test successful case auth register

    expect(received).toBeTruthy()

    Received: false

      71 |
      72 | test('Test successful case auth register', () => {
    > 73 |     expect(isValid(authRegisterV1(EMAIL, PASSWORD, FIRST, LAST))).toBeTruthy();
         |                                                                   ^
      74 | });
      75 |
      76 | test('Test a short password auth register', () => {

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:73:67)

  ● Test a short password auth register

    expect(received).toBeTruthy()

    Received: false

      75 |
      76 | test('Test a short password auth register', () => {
    > 77 |     expect(isValid(authRegisterV1(EMAIL, "a".repeat(6), FIRST, LAST))).toBeTruthy();
         |                                                                        ^
      78 | });
      79 |
      80 | test('Test a long password auth register', () => {

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:77:72)

  ● Test a long password auth register

    expect(received).toBeTruthy()

    Received: false

      79 |
      80 | test('Test a long password auth register', () => {
    > 81 |     expect(isValid(authRegisterV1(EMAIL, "a".repeat(64), FIRST, LAST))).toBeTruthy();
         |                                                                         ^
      82 | });
      83 |
      84 | test('Test short names auth register', () => {

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:81:73)

  ● Test short names auth register

    expect(received).toBeTruthy()

    Received: false

      83 |
      84 | test('Test short names auth register', () => {
    > 85 |     expect(isValid(authRegisterV1(EMAIL, PASSWORD, "F", "L"))).toBeTruthy();
         |                                                                ^
      86 | });
      87 |
      88 | test('Test long names auth register', () => {

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:85:64)

  ● Test long names auth register

    expect(received).toBeTruthy()

    Received: false

      87 |
      88 | test('Test long names auth register', () => {
    > 89 |     expect(isValid(authRegisterV1(EMAIL, PASSWORD, "F".repeat(50), "L".repeat(50)))).toBeTruthy();
         |                                                                                      ^
      90 | });
      91 |
      92 | test('Test same password auth register', () => {

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:89:86)

  ● Test same password auth register

    expect(received).toBeTruthy()

    Received: false

      91 |
      92 | test('Test same password auth register', () => {
    > 93 |     expect(isValid(authRegisterV1(EMAIL, PASSWORD, FIRST, LAST))).toBeTruthy();
         |                                                                   ^
      94 |     expect(isValid(authRegisterV1("second.email@domain.com", PASSWORD, "F2", "L2"))).toBeTruthy();
      95 | });
      96 |

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:93:67)

  ● Test same name auth register

    expect(received).toBeTruthy()

    Received: false

       96 |
       97 | test('Test same name auth register', () => {
    >  98 |     expect(isValid(authRegisterV1(EMAIL, PASSWORD, FIRST, LAST))).toBeTruthy();
          |                                                                   ^
       99 |     expect(isValid(authRegisterV1("second.email@domain.com", PASSWORD, FIRST, LAST))).toBeTruthy();
      100 | });

      at Object.<anonymous> (tests/tests/auth_tests/authRegister.test.js:98:67)

Test Suites: 9 failed, 2 passed, 11 total
Tests:       32 failed, 20 passed, 52 total
Snapshots:   0 total
Time:        1.883 s, estimated 2 s
Ran all test suites matching /tests\//i.
npm timing command:run Completed in 3162ms
npm verb exit 1
npm timing npm Completed in 3524ms
npm verb code 1
